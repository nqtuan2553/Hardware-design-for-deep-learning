// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.418500,HLS_SYN_LAT=48,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=197,HLS_SYN_LUT=733}" *)

module conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_0_address1,
        b_0_ce1,
        b_0_q1,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_1_address1,
        b_1_ce1,
        b_1_q1,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        b_2_address1,
        b_2_ce1,
        b_2_q1,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [4:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [1:0] b_0_address0;
output   b_0_ce0;
input  [7:0] b_0_q0;
output  [1:0] b_0_address1;
output   b_0_ce1;
input  [7:0] b_0_q1;
output  [1:0] b_1_address0;
output   b_1_ce0;
input  [7:0] b_1_q0;
output  [1:0] b_1_address1;
output   b_1_ce1;
input  [7:0] b_1_q1;
output  [1:0] b_2_address0;
output   b_2_ce0;
input  [7:0] b_2_q0;
output  [1:0] b_2_address1;
output   b_2_ce1;
input  [7:0] b_2_q1;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] a_address0;
reg a_ce0;
reg[4:0] a_address1;
reg a_ce1;
reg[1:0] b_0_address0;
reg b_0_ce0;
reg b_0_ce1;
reg[1:0] b_1_address0;
reg b_1_ce0;
reg b_1_ce1;
reg[1:0] b_2_address0;
reg b_2_ce0;
reg b_2_ce1;
reg res_ce0;
reg res_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] indvar_flatten_reg_248;
reg   [1:0] i_reg_259;
reg   [1:0] j_reg_270;
reg  signed [7:0] reg_281;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond_flatten_reg_749;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [7:0] reg_285;
wire   [0:0] exitcond_flatten_fu_295_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_749_pp0_iter1_reg;
wire   [3:0] indvar_flatten_next_fu_301_p2;
reg   [3:0] indvar_flatten_next_reg_753;
wire   [1:0] j_mid2_fu_313_p3;
reg   [1:0] j_mid2_reg_758;
wire   [1:0] tmp_mid2_fu_321_p3;
reg   [1:0] tmp_mid2_reg_764;
wire   [1:0] tmp_8_1_mid2_fu_335_p3;
reg   [1:0] tmp_8_1_mid2_reg_772;
wire   [5:0] tmp_9_fu_369_p2;
reg   [5:0] tmp_9_reg_778;
wire   [1:0] j_1_fu_379_p2;
reg   [1:0] j_1_reg_783;
wire   [5:0] tmp_5_0_1_cast_fu_385_p1;
reg   [5:0] tmp_5_0_1_cast_reg_788;
wire   [5:0] tmp_5_0_2_cast_fu_406_p1;
reg   [5:0] tmp_5_0_2_cast_reg_799;
wire   [5:0] tmp_11_fu_491_p2;
reg   [5:0] tmp_11_reg_815;
wire   [5:0] tmp_12_fu_497_p2;
reg   [5:0] tmp_12_reg_820;
wire   [4:0] tmp_13_fu_502_p2;
reg   [4:0] tmp_13_reg_825;
wire   [5:0] tmp_15_fu_518_p2;
reg   [5:0] tmp_15_reg_835;
wire   [5:0] tmp_17_fu_523_p2;
reg   [5:0] tmp_17_reg_840;
wire   [5:0] tmp_18_fu_528_p2;
reg   [5:0] tmp_18_reg_845;
reg   [7:0] b_2_load_reg_850;
reg  signed [7:0] b_0_load_1_reg_855;
wire  signed [15:0] grp_fu_665_p3;
reg  signed [15:0] tmp7_reg_860;
reg  signed [7:0] b_2_load_1_reg_875;
wire  signed [15:0] grp_fu_673_p3;
reg  signed [15:0] tmp2_reg_880;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire  signed [15:0] grp_fu_681_p3;
reg  signed [15:0] tmp3_reg_895;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire  signed [15:0] grp_fu_689_p3;
reg  signed [15:0] tmp5_reg_905;
wire  signed [15:0] grp_fu_697_p3;
reg  signed [15:0] tmp6_reg_910;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_252_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_i_phi_fu_263_p4;
reg   [1:0] ap_phi_mux_j_phi_fu_274_p4;
wire   [63:0] tmp_19_cast_fu_395_p1;
wire   [63:0] tmp_22_cast_fu_416_p1;
wire   [63:0] tmp_13_cast_fu_486_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_17_cast_fu_513_p1;
wire   [63:0] tmp_14_cast_fu_555_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] tmp_20_cast_fu_581_p1;
wire   [63:0] tmp_18_cast_fu_585_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] tmp_21_cast_fu_589_p1;
wire   [63:0] tmp_15_cast_fu_613_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] tmp_16_cast_fu_646_p1;
wire   [0:0] exitcond_fu_307_p2;
wire   [1:0] i_1_fu_289_p2;
wire   [1:0] tmp_7_1_mid1_fu_329_p2;
wire   [2:0] tmp_8_2_mid2_v_v_fu_343_p1;
wire   [2:0] tmp_8_2_mid2_v_fu_347_p2;
wire   [4:0] tmp_7_fu_357_p3;
wire   [5:0] p_shl_cast_fu_365_p1;
wire   [5:0] tmp_8_2_mid2_cast_fu_353_p1;
wire   [5:0] tmp_16_fu_389_p2;
wire   [2:0] tmp_4_cast8_fu_375_p1;
wire   [2:0] tmp_2_0_2_fu_400_p2;
wire   [5:0] tmp_19_fu_410_p2;
wire   [3:0] tmp_fu_427_p3;
wire   [5:0] p_shl3_cast1_fu_434_p1;
wire   [5:0] tmp_mid2_cast1_fu_421_p1;
wire   [4:0] p_shl3_cast_fu_438_p1;
wire   [4:0] tmp_mid2_cast_fu_424_p1;
wire   [3:0] tmp_2_fu_457_p3;
wire   [5:0] p_shl1_cast_fu_464_p1;
wire   [5:0] tmp_8_1_mid2_cast9_fu_454_p1;
wire   [5:0] tmp_3_cast_fu_477_p1;
wire   [5:0] tmp_6_fu_442_p2;
wire   [5:0] tmp_10_fu_480_p2;
wire   [5:0] tmp_3_fu_468_p2;
wire   [4:0] tmp_3_cast8_fu_474_p1;
wire   [4:0] tmp_8_fu_448_p2;
wire   [5:0] tmp_14_fu_508_p2;
wire  signed [7:0] tmp_13_2_1_fu_541_p0;
wire  signed [7:0] tmp_13_2_1_fu_541_p1;
wire  signed [7:0] tmp_13_0_1_fu_575_p0;
wire  signed [7:0] tmp_13_0_1_fu_575_p1;
wire  signed [7:0] tmp_13_0_2_fu_600_p0;
wire  signed [7:0] tmp_13_0_2_fu_600_p1;
wire  signed [7:0] tmp_13_1_1_fu_625_p0;
wire  signed [7:0] tmp_13_1_1_fu_625_p1;
(* use_dsp48 = "no" *) wire   [15:0] tmp4_fu_654_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp1_fu_650_p2;
wire   [15:0] grp_fu_665_p2;
wire   [15:0] grp_fu_673_p2;
wire   [15:0] grp_fu_681_p2;
wire   [15:0] grp_fu_689_p2;
wire    ap_CS_fsm_state9;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv2d_mac_muladdbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdbkb_U1(
    .din0(a_q1),
    .din1(b_2_q1),
    .din2(grp_fu_665_p2),
    .dout(grp_fu_665_p3)
);

conv2d_mac_muladdbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdbkb_U2(
    .din0(a_q0),
    .din1(reg_281),
    .din2(grp_fu_673_p2),
    .dout(grp_fu_673_p3)
);

conv2d_mac_muladdbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdbkb_U3(
    .din0(a_q1),
    .din1(b_0_load_1_reg_855),
    .din2(grp_fu_681_p2),
    .dout(grp_fu_681_p3)
);

conv2d_mac_muladdbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdbkb_U4(
    .din0(a_q1),
    .din1(b_2_load_1_reg_875),
    .din2(grp_fu_689_p2),
    .dout(grp_fu_689_p3)
);

conv2d_mac_muladdcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdcud_U5(
    .din0(a_q0),
    .din1(reg_281),
    .din2(tmp7_reg_860),
    .dout(grp_fu_697_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_259 <= tmp_mid2_reg_764;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_259 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_248 <= indvar_flatten_next_reg_753;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_248 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_270 <= j_1_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_270 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_0_load_1_reg_855 <= b_0_q1;
        b_2_load_reg_850 <= b_2_q0;
        tmp7_reg_860 <= grp_fu_665_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        b_2_load_1_reg_875 <= b_2_q0;
        tmp2_reg_880 <= grp_fu_673_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_749 <= exitcond_flatten_fu_295_p2;
        exitcond_flatten_reg_749_pp0_iter1_reg <= exitcond_flatten_reg_749;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_753 <= indvar_flatten_next_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_295_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_1_reg_783 <= j_1_fu_379_p2;
        tmp_mid2_reg_764 <= tmp_mid2_fu_321_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_mid2_reg_758 <= j_mid2_fu_313_p3;
        tmp_5_0_1_cast_reg_788[1 : 0] <= tmp_5_0_1_cast_fu_385_p1[1 : 0];
        tmp_5_0_2_cast_reg_799[2 : 0] <= tmp_5_0_2_cast_fu_406_p1[2 : 0];
        tmp_8_1_mid2_reg_772 <= tmp_8_1_mid2_fu_335_p3;
        tmp_9_reg_778 <= tmp_9_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((exitcond_flatten_reg_749 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_281 <= b_0_q0;
        reg_285 <= b_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp3_reg_895 <= grp_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp5_reg_905 <= grp_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp6_reg_910 <= grp_fu_697_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_11_reg_815 <= tmp_11_fu_491_p2;
        tmp_12_reg_820 <= tmp_12_fu_497_p2;
        tmp_13_reg_825 <= tmp_13_fu_502_p2;
        tmp_15_reg_835 <= tmp_15_fu_518_p2;
        tmp_17_reg_840 <= tmp_17_fu_523_p2;
        tmp_18_reg_845 <= tmp_18_fu_528_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            a_address0 = tmp_15_cast_fu_613_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            a_address0 = tmp_18_cast_fu_585_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_address0 = tmp_20_cast_fu_581_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_address0 = tmp_13_cast_fu_486_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_address0 = tmp_19_cast_fu_395_p1;
        end else begin
            a_address0 = 'bx;
        end
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            a_address1 = tmp_21_cast_fu_589_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            a_address1 = tmp_14_cast_fu_555_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            a_address1 = tmp_17_cast_fu_513_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            a_address1 = tmp_22_cast_fu_416_p1;
        end else begin
            a_address1 = 'bx;
        end
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_295_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_263_p4 = tmp_mid2_reg_764;
    end else begin
        ap_phi_mux_i_phi_fu_263_p4 = i_reg_259;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_252_p4 = indvar_flatten_next_reg_753;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_252_p4 = indvar_flatten_reg_248;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_749 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_274_p4 = j_1_reg_783;
    end else begin
        ap_phi_mux_j_phi_fu_274_p4 = j_reg_270;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_0_address0 = 64'd2;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_0_address0 = 64'd0;
        end else begin
            b_0_address0 = 'bx;
        end
    end else begin
        b_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_0_ce1 = 1'b1;
    end else begin
        b_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_1_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_1_address0 = 64'd0;
        end else begin
            b_1_address0 = 'bx;
        end
    end else begin
        b_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_1_ce1 = 1'b1;
    end else begin
        b_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_2_address0 = 64'd1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            b_2_address0 = 64'd0;
        end else begin
            b_2_address0 = 'bx;
        end
    end else begin
        b_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_2_ce1 = 1'b1;
    end else begin
        b_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        res_ce0 = 1'b1;
    end else begin
        res_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_749_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        res_we0 = 1'b1;
    end else begin
        res_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_295_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_295_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_0_address1 = 64'd1;

assign b_1_address1 = 64'd2;

assign b_2_address1 = 64'd2;

assign exitcond_flatten_fu_295_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_252_p4 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_307_p2 = ((ap_phi_mux_j_phi_fu_274_p4 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_665_p2 = ($signed(tmp_13_2_1_fu_541_p0) * $signed(tmp_13_2_1_fu_541_p1));

assign grp_fu_673_p2 = ($signed(tmp_13_0_1_fu_575_p0) * $signed(tmp_13_0_1_fu_575_p1));

assign grp_fu_681_p2 = ($signed(tmp_13_0_2_fu_600_p0) * $signed(tmp_13_0_2_fu_600_p1));

assign grp_fu_689_p2 = ($signed(tmp_13_1_1_fu_625_p0) * $signed(tmp_13_1_1_fu_625_p1));

assign i_1_fu_289_p2 = (ap_phi_mux_i_phi_fu_263_p4 + 2'd1);

assign indvar_flatten_next_fu_301_p2 = (ap_phi_mux_indvar_flatten_phi_fu_252_p4 + 4'd1);

assign j_1_fu_379_p2 = (j_mid2_fu_313_p3 + 2'd1);

assign j_mid2_fu_313_p3 = ((exitcond_fu_307_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_phi_fu_274_p4);

assign p_shl1_cast_fu_464_p1 = tmp_2_fu_457_p3;

assign p_shl3_cast1_fu_434_p1 = tmp_fu_427_p3;

assign p_shl3_cast_fu_438_p1 = tmp_fu_427_p3;

assign p_shl_cast_fu_365_p1 = tmp_7_fu_357_p3;

assign res_address0 = tmp_16_cast_fu_646_p1;

assign res_d0 = (tmp4_fu_654_p2 + tmp1_fu_650_p2);

assign tmp1_fu_650_p2 = ($signed(tmp3_reg_895) + $signed(tmp2_reg_880));

assign tmp4_fu_654_p2 = ($signed(tmp6_reg_910) + $signed(tmp5_reg_905));

assign tmp_10_fu_480_p2 = (tmp_3_cast_fu_477_p1 + tmp_6_fu_442_p2);

assign tmp_11_fu_491_p2 = (tmp_3_cast_fu_477_p1 + tmp_3_fu_468_p2);

assign tmp_12_fu_497_p2 = (tmp_3_cast_fu_477_p1 + tmp_9_reg_778);

assign tmp_13_0_1_fu_575_p0 = a_q1;

assign tmp_13_0_1_fu_575_p1 = reg_285;

assign tmp_13_0_2_fu_600_p0 = a_q0;

assign tmp_13_0_2_fu_600_p1 = b_2_load_reg_850;

assign tmp_13_1_1_fu_625_p0 = a_q0;

assign tmp_13_1_1_fu_625_p1 = reg_285;

assign tmp_13_2_1_fu_541_p0 = a_q0;

assign tmp_13_2_1_fu_541_p1 = b_1_q1;

assign tmp_13_cast_fu_486_p1 = tmp_10_fu_480_p2;

assign tmp_13_fu_502_p2 = (tmp_3_cast8_fu_474_p1 + tmp_8_fu_448_p2);

assign tmp_14_cast_fu_555_p1 = tmp_11_reg_815;

assign tmp_14_fu_508_p2 = (tmp_5_0_1_cast_reg_788 + tmp_6_fu_442_p2);

assign tmp_15_cast_fu_613_p1 = tmp_12_reg_820;

assign tmp_15_fu_518_p2 = (tmp_5_0_1_cast_reg_788 + tmp_3_fu_468_p2);

assign tmp_16_cast_fu_646_p1 = tmp_13_reg_825;

assign tmp_16_fu_389_p2 = (tmp_5_0_1_cast_fu_385_p1 + tmp_9_fu_369_p2);

assign tmp_17_cast_fu_513_p1 = tmp_14_fu_508_p2;

assign tmp_17_fu_523_p2 = (tmp_5_0_2_cast_reg_799 + tmp_6_fu_442_p2);

assign tmp_18_cast_fu_585_p1 = tmp_15_reg_835;

assign tmp_18_fu_528_p2 = (tmp_5_0_2_cast_reg_799 + tmp_3_fu_468_p2);

assign tmp_19_cast_fu_395_p1 = tmp_16_fu_389_p2;

assign tmp_19_fu_410_p2 = (tmp_5_0_2_cast_fu_406_p1 + tmp_9_fu_369_p2);

assign tmp_20_cast_fu_581_p1 = tmp_17_reg_840;

assign tmp_21_cast_fu_589_p1 = tmp_18_reg_845;

assign tmp_22_cast_fu_416_p1 = tmp_19_fu_410_p2;

assign tmp_2_0_2_fu_400_p2 = (tmp_4_cast8_fu_375_p1 + 3'd2);

assign tmp_2_fu_457_p3 = {{tmp_8_1_mid2_reg_772}, {2'd0}};

assign tmp_3_cast8_fu_474_p1 = j_mid2_reg_758;

assign tmp_3_cast_fu_477_p1 = j_mid2_reg_758;

assign tmp_3_fu_468_p2 = (p_shl1_cast_fu_464_p1 + tmp_8_1_mid2_cast9_fu_454_p1);

assign tmp_4_cast8_fu_375_p1 = j_mid2_fu_313_p3;

assign tmp_5_0_1_cast_fu_385_p1 = j_1_fu_379_p2;

assign tmp_5_0_2_cast_fu_406_p1 = tmp_2_0_2_fu_400_p2;

assign tmp_6_fu_442_p2 = (p_shl3_cast1_fu_434_p1 + tmp_mid2_cast1_fu_421_p1);

assign tmp_7_1_mid1_fu_329_p2 = (ap_phi_mux_i_phi_fu_263_p4 ^ 2'd2);

assign tmp_7_fu_357_p3 = {{tmp_8_2_mid2_v_fu_347_p2}, {2'd0}};

assign tmp_8_1_mid2_cast9_fu_454_p1 = tmp_8_1_mid2_reg_772;

assign tmp_8_1_mid2_fu_335_p3 = ((exitcond_fu_307_p2[0:0] === 1'b1) ? tmp_7_1_mid1_fu_329_p2 : i_1_fu_289_p2);

assign tmp_8_2_mid2_cast_fu_353_p1 = tmp_8_2_mid2_v_fu_347_p2;

assign tmp_8_2_mid2_v_fu_347_p2 = (tmp_8_2_mid2_v_v_fu_343_p1 + 3'd2);

assign tmp_8_2_mid2_v_v_fu_343_p1 = tmp_mid2_fu_321_p3;

assign tmp_8_fu_448_p2 = (p_shl3_cast_fu_438_p1 - tmp_mid2_cast_fu_424_p1);

assign tmp_9_fu_369_p2 = (p_shl_cast_fu_365_p1 + tmp_8_2_mid2_cast_fu_353_p1);

assign tmp_fu_427_p3 = {{tmp_mid2_reg_764}, {2'd0}};

assign tmp_mid2_cast1_fu_421_p1 = tmp_mid2_reg_764;

assign tmp_mid2_cast_fu_424_p1 = tmp_mid2_reg_764;

assign tmp_mid2_fu_321_p3 = ((exitcond_fu_307_p2[0:0] === 1'b1) ? i_1_fu_289_p2 : ap_phi_mux_i_phi_fu_263_p4);

always @ (posedge ap_clk) begin
    tmp_5_0_1_cast_reg_788[5:2] <= 4'b0000;
    tmp_5_0_2_cast_reg_799[5:3] <= 3'b000;
end

endmodule //conv2d
