-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.418500,HLS_SYN_LAT=48,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=197,HLS_SYN_LUT=733}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_248 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_259 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_270 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond_flatten_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_285 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_301_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_753 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_313_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_758 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_fu_321_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_reg_764 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_1_mid2_fu_335_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_1_mid2_reg_772 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_reg_778 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_379_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_783 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_0_1_cast_fu_385_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_0_1_cast_reg_788 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_0_2_cast_fu_406_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_0_2_cast_reg_799 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_815 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_497_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_820 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_reg_825 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_518_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_reg_835 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_523_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_reg_840 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_528_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_reg_845 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_2_load_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_0_load_1_reg_855 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_665_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_860 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_2_load_1_reg_875 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_673_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_880 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_681_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_895 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_689_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_905 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_697_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_910 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_252_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_263_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_phi_fu_274_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_19_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_17_cast_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_20_cast_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_21_cast_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_16_cast_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_1_mid1_fu_329_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_2_mid2_v_v_fu_343_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_2_mid2_v_fu_347_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_357_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_365_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_2_mid2_cast_fu_353_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_389_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_cast8_fu_375_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_0_2_fu_400_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_fu_410_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_427_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl3_cast1_fu_434_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid2_cast1_fu_421_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl3_cast_fu_438_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid2_cast_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_457_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_464_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_1_mid2_cast9_fu_454_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_477_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_480_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_468_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast8_fu_474_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_508_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_2_1_fu_541_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_1_fu_541_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_1_fu_575_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_1_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_2_fu_600_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_2_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_1_fu_625_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_1_fu_625_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp4_fu_654_p2 : signal is "no";
    signal tmp1_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp1_fu_650_p2 : signal is "no";
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_673_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv2d_mac_muladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv2d_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv2d_mac_muladdbkb_U1 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_q1,
        din1 => b_2_q1,
        din2 => grp_fu_665_p2,
        dout => grp_fu_665_p3);

    conv2d_mac_muladdbkb_U2 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_q0,
        din1 => reg_281,
        din2 => grp_fu_673_p2,
        dout => grp_fu_673_p3);

    conv2d_mac_muladdbkb_U3 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_q1,
        din1 => b_0_load_1_reg_855,
        din2 => grp_fu_681_p2,
        dout => grp_fu_681_p3);

    conv2d_mac_muladdbkb_U4 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_q1,
        din1 => b_2_load_1_reg_875,
        din2 => grp_fu_689_p2,
        dout => grp_fu_689_p3);

    conv2d_mac_muladdcud_U5 : component conv2d_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_q0,
        din1 => reg_281,
        din2 => tmp7_reg_860,
        dout => grp_fu_697_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_259 <= tmp_mid2_reg_764;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_259 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_248 <= indvar_flatten_next_reg_753;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_248 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_270 <= j_1_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_270 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_0_load_1_reg_855 <= b_0_q1;
                b_2_load_reg_850 <= b_2_q0;
                tmp7_reg_860 <= grp_fu_665_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                b_2_load_1_reg_875 <= b_2_q0;
                tmp2_reg_880 <= grp_fu_673_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_749 <= exitcond_flatten_fu_295_p2;
                exitcond_flatten_reg_749_pp0_iter1_reg <= exitcond_flatten_reg_749;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_753 <= indvar_flatten_next_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_295_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_1_reg_783 <= j_1_fu_379_p2;
                tmp_mid2_reg_764 <= tmp_mid2_fu_321_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_mid2_reg_758 <= j_mid2_fu_313_p3;
                    tmp_5_0_1_cast_reg_788(1 downto 0) <= tmp_5_0_1_cast_fu_385_p1(1 downto 0);
                    tmp_5_0_2_cast_reg_799(2 downto 0) <= tmp_5_0_2_cast_fu_406_p1(2 downto 0);
                tmp_8_1_mid2_reg_772 <= tmp_8_1_mid2_fu_335_p3;
                tmp_9_reg_778 <= tmp_9_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_281 <= b_0_q0;
                reg_285 <= b_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp3_reg_895 <= grp_fu_681_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp5_reg_905 <= grp_fu_689_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp6_reg_910 <= grp_fu_697_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_11_reg_815 <= tmp_11_fu_491_p2;
                tmp_12_reg_820 <= tmp_12_fu_497_p2;
                tmp_13_reg_825 <= tmp_13_fu_502_p2;
                tmp_15_reg_835 <= tmp_15_fu_518_p2;
                tmp_17_reg_840 <= tmp_17_fu_523_p2;
                tmp_18_reg_845 <= tmp_18_fu_528_p2;
            end if;
        end if;
    end process;
    tmp_5_0_1_cast_reg_788(5 downto 2) <= "0000";
    tmp_5_0_2_cast_reg_799(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_295_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_295_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_295_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, tmp_19_cast_fu_395_p1, tmp_13_cast_fu_486_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, tmp_20_cast_fu_581_p1, tmp_18_cast_fu_585_p1, ap_block_pp0_stage3, tmp_15_cast_fu_613_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_address0 <= tmp_15_cast_fu_613_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                a_address0 <= tmp_18_cast_fu_585_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address0 <= tmp_20_cast_fu_581_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= tmp_13_cast_fu_486_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= tmp_19_cast_fu_395_p1(5 - 1 downto 0);
            else 
                a_address0 <= "XXXXX";
            end if;
        else 
            a_address0 <= "XXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, tmp_22_cast_fu_416_p1, ap_block_pp0_stage1, tmp_17_cast_fu_513_p1, tmp_14_cast_fu_555_p1, ap_block_pp0_stage2, ap_block_pp0_stage3, tmp_21_cast_fu_589_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                a_address1 <= tmp_21_cast_fu_589_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address1 <= tmp_14_cast_fu_555_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address1 <= tmp_17_cast_fu_513_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address1 <= tmp_22_cast_fu_416_p1(5 - 1 downto 0);
            else 
                a_address1 <= "XXXXX";
            end if;
        else 
            a_address1 <= "XXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_295_p2)
    begin
        if ((exitcond_flatten_fu_295_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_263_p4_assign_proc : process(i_reg_259, exitcond_flatten_reg_749, ap_CS_fsm_pp0_stage0, tmp_mid2_reg_764, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_263_p4 <= tmp_mid2_reg_764;
        else 
            ap_phi_mux_i_phi_fu_263_p4 <= i_reg_259;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_252_p4_assign_proc : process(indvar_flatten_reg_248, exitcond_flatten_reg_749, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_753, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_252_p4 <= indvar_flatten_next_reg_753;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_252_p4 <= indvar_flatten_reg_248;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_274_p4_assign_proc : process(j_reg_270, exitcond_flatten_reg_749, ap_CS_fsm_pp0_stage0, j_1_reg_783, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten_reg_749 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_274_p4 <= j_1_reg_783;
        else 
            ap_phi_mux_j_phi_fu_274_p4 <= j_reg_270;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_0_address0 <= "XX";
            end if;
        else 
            b_0_address0 <= "XX";
        end if; 
    end process;

    b_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_1_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_1_address0 <= "XX";
            end if;
        else 
            b_1_address0 <= "XX";
        end if; 
    end process;

    b_1_address1 <= ap_const_lv64_2(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_2_address0 <= ap_const_lv64_1(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_2_address0 <= "XX";
            end if;
        else 
            b_2_address0 <= "XX";
        end if; 
    end process;

    b_2_address1 <= ap_const_lv64_2(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_295_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_252_p4 = ap_const_lv4_9) else "0";
    exitcond_fu_307_p2 <= "1" when (ap_phi_mux_j_phi_fu_274_p4 = ap_const_lv2_3) else "0";
    grp_fu_665_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_2_1_fu_541_p0) * signed(tmp_13_2_1_fu_541_p1))), 16));
    grp_fu_673_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_0_1_fu_575_p0) * signed(tmp_13_0_1_fu_575_p1))), 16));
    grp_fu_681_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_0_2_fu_600_p0) * signed(tmp_13_0_2_fu_600_p1))), 16));
    grp_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_1_1_fu_625_p0) * signed(tmp_13_1_1_fu_625_p1))), 16));
    i_1_fu_289_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_263_p4) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_301_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_252_p4) + unsigned(ap_const_lv4_1));
    j_1_fu_379_p2 <= std_logic_vector(unsigned(j_mid2_fu_313_p3) + unsigned(ap_const_lv2_1));
    j_mid2_fu_313_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_307_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_274_p4;
    p_shl1_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_457_p3),6));
    p_shl3_cast1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_427_p3),6));
    p_shl3_cast_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_427_p3),5));
    p_shl_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_357_p3),6));
    res_address0 <= tmp_16_cast_fu_646_p1(4 - 1 downto 0);

    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= std_logic_vector(unsigned(tmp4_fu_654_p2) + unsigned(tmp1_fu_650_p2));

    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, exitcond_flatten_reg_749_pp0_iter1_reg, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_749_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_650_p2 <= std_logic_vector(signed(tmp3_reg_895) + signed(tmp2_reg_880));
    tmp4_fu_654_p2 <= std_logic_vector(signed(tmp6_reg_910) + signed(tmp5_reg_905));
    tmp_10_fu_480_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_477_p1) + unsigned(tmp_6_fu_442_p2));
    tmp_11_fu_491_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_477_p1) + unsigned(tmp_3_fu_468_p2));
    tmp_12_fu_497_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_477_p1) + unsigned(tmp_9_reg_778));
    tmp_13_0_1_fu_575_p0 <= a_q1;
    tmp_13_0_1_fu_575_p1 <= reg_285;
    tmp_13_0_2_fu_600_p0 <= a_q0;
    tmp_13_0_2_fu_600_p1 <= b_2_load_reg_850;
    tmp_13_1_1_fu_625_p0 <= a_q0;
    tmp_13_1_1_fu_625_p1 <= reg_285;
    tmp_13_2_1_fu_541_p0 <= a_q0;
    tmp_13_2_1_fu_541_p1 <= b_1_q1;
    tmp_13_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_480_p2),64));
    tmp_13_fu_502_p2 <= std_logic_vector(unsigned(tmp_3_cast8_fu_474_p1) + unsigned(tmp_8_fu_448_p2));
    tmp_14_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_815),64));
    tmp_14_fu_508_p2 <= std_logic_vector(unsigned(tmp_5_0_1_cast_reg_788) + unsigned(tmp_6_fu_442_p2));
    tmp_15_cast_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_820),64));
    tmp_15_fu_518_p2 <= std_logic_vector(unsigned(tmp_5_0_1_cast_reg_788) + unsigned(tmp_3_fu_468_p2));
    tmp_16_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_825),64));
    tmp_16_fu_389_p2 <= std_logic_vector(unsigned(tmp_5_0_1_cast_fu_385_p1) + unsigned(tmp_9_fu_369_p2));
    tmp_17_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_508_p2),64));
    tmp_17_fu_523_p2 <= std_logic_vector(unsigned(tmp_5_0_2_cast_reg_799) + unsigned(tmp_6_fu_442_p2));
    tmp_18_cast_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_835),64));
    tmp_18_fu_528_p2 <= std_logic_vector(unsigned(tmp_5_0_2_cast_reg_799) + unsigned(tmp_3_fu_468_p2));
    tmp_19_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_389_p2),64));
    tmp_19_fu_410_p2 <= std_logic_vector(unsigned(tmp_5_0_2_cast_fu_406_p1) + unsigned(tmp_9_fu_369_p2));
    tmp_20_cast_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_840),64));
    tmp_21_cast_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_reg_845),64));
    tmp_22_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_410_p2),64));
    tmp_2_0_2_fu_400_p2 <= std_logic_vector(unsigned(tmp_4_cast8_fu_375_p1) + unsigned(ap_const_lv3_2));
    tmp_2_fu_457_p3 <= (tmp_8_1_mid2_reg_772 & ap_const_lv2_0);
    tmp_3_cast8_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_758),5));
    tmp_3_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_758),6));
    tmp_3_fu_468_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_464_p1) + unsigned(tmp_8_1_mid2_cast9_fu_454_p1));
    tmp_4_cast8_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_fu_313_p3),3));
    tmp_5_0_1_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_379_p2),6));
    tmp_5_0_2_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_0_2_fu_400_p2),6));
    tmp_6_fu_442_p2 <= std_logic_vector(unsigned(p_shl3_cast1_fu_434_p1) + unsigned(tmp_mid2_cast1_fu_421_p1));
    tmp_7_1_mid1_fu_329_p2 <= (ap_phi_mux_i_phi_fu_263_p4 xor ap_const_lv2_2);
    tmp_7_fu_357_p3 <= (tmp_8_2_mid2_v_fu_347_p2 & ap_const_lv2_0);
    tmp_8_1_mid2_cast9_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_1_mid2_reg_772),6));
    tmp_8_1_mid2_fu_335_p3 <= 
        tmp_7_1_mid1_fu_329_p2 when (exitcond_fu_307_p2(0) = '1') else 
        i_1_fu_289_p2;
    tmp_8_2_mid2_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_2_mid2_v_fu_347_p2),6));
    tmp_8_2_mid2_v_fu_347_p2 <= std_logic_vector(unsigned(tmp_8_2_mid2_v_v_fu_343_p1) + unsigned(ap_const_lv3_2));
    tmp_8_2_mid2_v_v_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_fu_321_p3),3));
    tmp_8_fu_448_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_438_p1) - unsigned(tmp_mid2_cast_fu_424_p1));
    tmp_9_fu_369_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_365_p1) + unsigned(tmp_8_2_mid2_cast_fu_353_p1));
    tmp_fu_427_p3 <= (tmp_mid2_reg_764 & ap_const_lv2_0);
    tmp_mid2_cast1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_764),6));
    tmp_mid2_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_764),5));
    tmp_mid2_fu_321_p3 <= 
        i_1_fu_289_p2 when (exitcond_fu_307_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_263_p4;
end behav;
