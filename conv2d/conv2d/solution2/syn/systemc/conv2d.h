// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _conv2d_HH_
#define _conv2d_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "conv2d_mux_32_16_bkb.h"
#include "conv2d_mac_muladdcud.h"
#include "conv2d_mac_muladddEe.h"

namespace ap_rtl {

struct conv2d : public sc_module {
    // Port declarations 45
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > a_0_address0;
    sc_out< sc_logic > a_0_ce0;
    sc_in< sc_lv<8> > a_0_q0;
    sc_out< sc_lv<3> > a_1_address0;
    sc_out< sc_logic > a_1_ce0;
    sc_in< sc_lv<8> > a_1_q0;
    sc_out< sc_lv<3> > a_2_address0;
    sc_out< sc_logic > a_2_ce0;
    sc_in< sc_lv<8> > a_2_q0;
    sc_out< sc_lv<3> > a_3_address0;
    sc_out< sc_logic > a_3_ce0;
    sc_in< sc_lv<8> > a_3_q0;
    sc_out< sc_lv<3> > a_4_address0;
    sc_out< sc_logic > a_4_ce0;
    sc_in< sc_lv<8> > a_4_q0;
    sc_out< sc_lv<2> > b_0_address0;
    sc_out< sc_logic > b_0_ce0;
    sc_in< sc_lv<8> > b_0_q0;
    sc_out< sc_lv<2> > b_1_address0;
    sc_out< sc_logic > b_1_ce0;
    sc_in< sc_lv<8> > b_1_q0;
    sc_out< sc_lv<2> > b_2_address0;
    sc_out< sc_logic > b_2_ce0;
    sc_in< sc_lv<8> > b_2_q0;
    sc_out< sc_lv<2> > res_0_address0;
    sc_out< sc_logic > res_0_ce0;
    sc_out< sc_logic > res_0_we0;
    sc_out< sc_lv<16> > res_0_d0;
    sc_in< sc_lv<16> > res_0_q0;
    sc_out< sc_lv<2> > res_1_address0;
    sc_out< sc_logic > res_1_ce0;
    sc_out< sc_logic > res_1_we0;
    sc_out< sc_lv<16> > res_1_d0;
    sc_in< sc_lv<16> > res_1_q0;
    sc_out< sc_lv<2> > res_2_address0;
    sc_out< sc_logic > res_2_ce0;
    sc_out< sc_logic > res_2_we0;
    sc_out< sc_lv<16> > res_2_d0;
    sc_in< sc_lv<16> > res_2_q0;


    // Module declarations
    conv2d(sc_module_name name);
    SC_HAS_PROCESS(conv2d);

    ~conv2d();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    conv2d_mux_32_16_bkb<1,1,16,16,16,2,16>* conv2d_mux_32_16_bkb_U1;
    conv2d_mac_muladdcud<1,1,8,8,16,16>* conv2d_mac_muladdcud_U2;
    conv2d_mac_muladddEe<1,1,8,8,16,16>* conv2d_mac_muladddEe_U3;
    conv2d_mac_muladddEe<1,1,8,8,16,16>* conv2d_mac_muladddEe_U4;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > ki_reg_261;
    sc_signal< sc_lv<8> > a_load_1_phi_reg_283;
    sc_signal< sc_lv<8> > a_load_2_phi_reg_295;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<2> > j_mid2_reg_494;
    sc_signal< sc_lv<1> > exitcond1_reg_525;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_326_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > indvar_flatten_next_fu_332_p2;
    sc_signal< sc_lv<4> > indvar_flatten_next_reg_489;
    sc_signal< sc_lv<2> > j_mid2_fu_344_p3;
    sc_signal< sc_lv<2> > tmp_mid2_v_fu_358_p3;
    sc_signal< sc_lv<2> > tmp_mid2_v_reg_500;
    sc_signal< sc_lv<3> > tmp_1_cast_mid2_fu_376_p1;
    sc_signal< sc_lv<3> > tmp_1_cast_mid2_reg_505;
    sc_signal< sc_lv<2> > res_0_addr_1_reg_510;
    sc_signal< sc_lv<2> > res_1_addr_1_reg_515;
    sc_signal< sc_lv<2> > res_2_addr_1_reg_520;
    sc_signal< sc_lv<1> > exitcond1_fu_380_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > ki_1_fu_386_p2;
    sc_signal< sc_lv<2> > ki_1_reg_529;
    sc_signal< sc_lv<8> > b_0_load_reg_579;
    sc_signal< sc_lv<8> > b_1_load_reg_584;
    sc_signal< sc_lv<8> > b_2_load_reg_594;
    sc_signal< sc_lv<16> > grp_fu_454_p3;
    sc_signal< sc_lv<16> > tmp_2_reg_599;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state5_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<16> > grp_fu_465_p3;
    sc_signal< sc_lv<16> > tmp_14_1_reg_604;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state6_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<2> > j_1_fu_449_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_lv<4> > indvar_flatten_reg_228;
    sc_signal< sc_lv<2> > i_reg_239;
    sc_signal< sc_lv<2> > j_reg_250;
    sc_signal< sc_lv<2> > ap_phi_mux_ki_phi_fu_265_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295;
    sc_signal< sc_lv<64> > tmp_mid2_fu_366_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_401_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_410_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_lv<16> > grp_fu_475_p3;
    sc_signal< sc_lv<1> > exitcond_fu_338_p2;
    sc_signal< sc_lv<2> > i_s_fu_352_p2;
    sc_signal< sc_lv<3> > tmp_6_cast_fu_392_p1;
    sc_signal< sc_lv<3> > tmp_7_fu_396_p2;
    sc_signal< sc_lv<16> > tmp_6_fu_424_p5;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_481;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_pp0_stage1;
    static const sc_lv<7> ap_ST_fsm_pp0_stage2;
    static const sc_lv<7> ap_ST_fsm_pp0_stage3;
    static const sc_lv<7> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<2> ap_const_lv2_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_0_address0();
    void thread_a_0_ce0();
    void thread_a_1_address0();
    void thread_a_1_ce0();
    void thread_a_2_address0();
    void thread_a_2_ce0();
    void thread_a_3_address0();
    void thread_a_3_ce0();
    void thread_a_4_address0();
    void thread_a_4_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage2_iter0();
    void thread_ap_block_state6_pp0_stage3_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_condition_481();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_ki_phi_fu_265_p4();
    void thread_ap_ready();
    void thread_b_0_address0();
    void thread_b_0_ce0();
    void thread_b_1_address0();
    void thread_b_1_ce0();
    void thread_b_2_address0();
    void thread_b_2_ce0();
    void thread_exitcond1_fu_380_p2();
    void thread_exitcond_flatten_fu_326_p2();
    void thread_exitcond_fu_338_p2();
    void thread_i_s_fu_352_p2();
    void thread_indvar_flatten_next_fu_332_p2();
    void thread_j_1_fu_449_p2();
    void thread_j_mid2_fu_344_p3();
    void thread_ki_1_fu_386_p2();
    void thread_res_0_address0();
    void thread_res_0_ce0();
    void thread_res_0_d0();
    void thread_res_0_we0();
    void thread_res_1_address0();
    void thread_res_1_ce0();
    void thread_res_1_d0();
    void thread_res_1_we0();
    void thread_res_2_address0();
    void thread_res_2_ce0();
    void thread_res_2_d0();
    void thread_res_2_we0();
    void thread_tmp_1_cast_mid2_fu_376_p1();
    void thread_tmp_6_cast_fu_392_p1();
    void thread_tmp_7_fu_396_p2();
    void thread_tmp_8_fu_401_p1();
    void thread_tmp_9_fu_410_p1();
    void thread_tmp_mid2_fu_366_p1();
    void thread_tmp_mid2_v_fu_358_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
