// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv2d,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.599500,HLS_SYN_LAT=136,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=134,HLS_SYN_LUT=375}" *)

module conv2d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0_address0,
        a_0_ce0,
        a_0_q0,
        a_1_address0,
        a_1_ce0,
        a_1_q0,
        a_2_address0,
        a_2_ce0,
        a_2_q0,
        a_3_address0,
        a_3_ce0,
        a_3_q0,
        a_4_address0,
        a_4_ce0,
        a_4_q0,
        b_0_address0,
        b_0_ce0,
        b_0_q0,
        b_1_address0,
        b_1_ce0,
        b_1_q0,
        b_2_address0,
        b_2_ce0,
        b_2_q0,
        res_0_address0,
        res_0_ce0,
        res_0_we0,
        res_0_d0,
        res_0_q0,
        res_1_address0,
        res_1_ce0,
        res_1_we0,
        res_1_d0,
        res_1_q0,
        res_2_address0,
        res_2_ce0,
        res_2_we0,
        res_2_d0,
        res_2_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state8 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_0_address0;
output   a_0_ce0;
input  [7:0] a_0_q0;
output  [2:0] a_1_address0;
output   a_1_ce0;
input  [7:0] a_1_q0;
output  [2:0] a_2_address0;
output   a_2_ce0;
input  [7:0] a_2_q0;
output  [2:0] a_3_address0;
output   a_3_ce0;
input  [7:0] a_3_q0;
output  [2:0] a_4_address0;
output   a_4_ce0;
input  [7:0] a_4_q0;
output  [1:0] b_0_address0;
output   b_0_ce0;
input  [7:0] b_0_q0;
output  [1:0] b_1_address0;
output   b_1_ce0;
input  [7:0] b_1_q0;
output  [1:0] b_2_address0;
output   b_2_ce0;
input  [7:0] b_2_q0;
output  [1:0] res_0_address0;
output   res_0_ce0;
output   res_0_we0;
output  [15:0] res_0_d0;
input  [15:0] res_0_q0;
output  [1:0] res_1_address0;
output   res_1_ce0;
output   res_1_we0;
output  [15:0] res_1_d0;
input  [15:0] res_1_q0;
output  [1:0] res_2_address0;
output   res_2_ce0;
output   res_2_we0;
output  [15:0] res_2_d0;
input  [15:0] res_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_0_ce0;
reg a_1_ce0;
reg a_2_ce0;
reg a_3_ce0;
reg a_4_ce0;
reg b_0_ce0;
reg b_1_ce0;
reg b_2_ce0;
reg[1:0] res_0_address0;
reg res_0_ce0;
reg res_0_we0;
reg[15:0] res_0_d0;
reg[1:0] res_1_address0;
reg res_1_ce0;
reg res_1_we0;
reg[15:0] res_1_d0;
reg[1:0] res_2_address0;
reg res_2_ce0;
reg res_2_we0;
reg[15:0] res_2_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] ki_reg_261;
reg  signed [7:0] a_load_1_phi_reg_283;
reg  signed [7:0] a_load_2_phi_reg_295;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [1:0] j_mid2_reg_494;
reg   [0:0] exitcond1_reg_525;
wire   [0:0] exitcond_flatten_fu_326_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] indvar_flatten_next_fu_332_p2;
reg   [3:0] indvar_flatten_next_reg_489;
wire   [1:0] j_mid2_fu_344_p3;
wire   [1:0] tmp_mid2_v_fu_358_p3;
reg   [1:0] tmp_mid2_v_reg_500;
wire   [2:0] tmp_1_cast_mid2_fu_376_p1;
reg   [2:0] tmp_1_cast_mid2_reg_505;
reg   [1:0] res_0_addr_1_reg_510;
reg   [1:0] res_1_addr_1_reg_515;
reg   [1:0] res_2_addr_1_reg_520;
wire   [0:0] exitcond1_fu_380_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] ki_1_fu_386_p2;
reg   [1:0] ki_1_reg_529;
reg  signed [7:0] b_0_load_reg_579;
reg  signed [7:0] b_1_load_reg_584;
reg  signed [7:0] b_2_load_reg_594;
wire  signed [15:0] grp_fu_454_p3;
reg  signed [15:0] tmp_2_reg_599;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire  signed [15:0] grp_fu_465_p3;
reg  signed [15:0] tmp_14_1_reg_604;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [1:0] j_1_fu_449_p2;
wire    ap_CS_fsm_state8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [3:0] indvar_flatten_reg_228;
reg   [1:0] i_reg_239;
reg   [1:0] j_reg_250;
reg   [1:0] ap_phi_mux_ki_phi_fu_265_p4;
wire    ap_block_pp0_stage0;
reg  signed [7:0] ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272;
reg   [7:0] ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283;
reg   [7:0] ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295;
wire   [63:0] tmp_mid2_fu_366_p1;
wire   [63:0] tmp_8_fu_401_p1;
wire   [63:0] tmp_9_fu_410_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire  signed [15:0] grp_fu_475_p3;
wire   [0:0] exitcond_fu_338_p2;
wire   [1:0] i_s_fu_352_p2;
wire   [2:0] tmp_6_cast_fu_392_p1;
wire   [2:0] tmp_7_fu_396_p2;
wire   [15:0] tmp_6_fu_424_p5;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_481;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv2d_mux_32_16_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
conv2d_mux_32_16_bkb_U1(
    .din0(res_0_q0),
    .din1(res_1_q0),
    .din2(res_2_q0),
    .din3(j_mid2_reg_494),
    .dout(tmp_6_fu_424_p5)
);

conv2d_mac_muladdcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladdcud_U2(
    .din0(ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272),
    .din1(b_0_load_reg_579),
    .din2(tmp_6_fu_424_p5),
    .dout(grp_fu_454_p3)
);

conv2d_mac_muladddEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladddEe_U3(
    .din0(a_load_1_phi_reg_283),
    .din1(b_1_load_reg_584),
    .din2(tmp_2_reg_599),
    .dout(grp_fu_465_p3)
);

conv2d_mac_muladddEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
conv2d_mac_muladddEe_U4(
    .din0(a_load_2_phi_reg_295),
    .din1(b_2_load_reg_594),
    .din2(tmp_14_1_reg_604),
    .dout(grp_fu_475_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_481)) begin
        if ((~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1))) begin
            ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_2_q0;
        end else if ((j_mid2_reg_494 == 2'd1)) begin
            ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_1_q0;
        end else if ((j_mid2_reg_494 == 2'd0)) begin
            ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_481)) begin
        if ((~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1))) begin
            ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_3_q0;
        end else if ((j_mid2_reg_494 == 2'd1)) begin
            ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_2_q0;
        end else if ((j_mid2_reg_494 == 2'd0)) begin
            ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_481)) begin
        if ((~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1))) begin
            ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_4_q0;
        end else if ((j_mid2_reg_494 == 2'd1)) begin
            ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_3_q0;
        end else if ((j_mid2_reg_494 == 2'd0)) begin
            ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_2_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_239 <= tmp_mid2_v_reg_500;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_239 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_228 <= indvar_flatten_next_reg_489;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_228 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_reg_250 <= j_1_fu_449_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_525 == 1'd0))) begin
        ki_reg_261 <= ki_1_reg_529;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0))) begin
        ki_reg_261 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_load_1_phi_reg_283 <= ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283;
        a_load_2_phi_reg_295 <= ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond1_reg_525 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        b_0_load_reg_579 <= b_0_q0;
        b_1_load_reg_584 <= b_1_q0;
        b_2_load_reg_594 <= b_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond1_reg_525 <= exitcond1_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next_reg_489 <= indvar_flatten_next_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0))) begin
        j_mid2_reg_494 <= j_mid2_fu_344_p3;
        res_0_addr_1_reg_510 <= tmp_mid2_fu_366_p1;
        res_1_addr_1_reg_515 <= tmp_mid2_fu_366_p1;
        res_2_addr_1_reg_520 <= tmp_mid2_fu_366_p1;
        tmp_1_cast_mid2_reg_505[1 : 0] <= tmp_1_cast_mid2_fu_376_p1[1 : 0];
        tmp_mid2_v_reg_500 <= tmp_mid2_v_fu_358_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ki_1_reg_529 <= ki_1_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0))) begin
        tmp_14_1_reg_604 <= grp_fu_465_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0))) begin
        tmp_2_reg_599 <= grp_fu_454_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_0_ce0 = 1'b1;
    end else begin
        a_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0) & (j_mid2_reg_494 == 2'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0) & (j_mid2_reg_494 == 2'd1)))) begin
        a_1_ce0 = 1'b1;
    end else begin
        a_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0) & (j_mid2_reg_494 == 2'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0) & (j_mid2_reg_494 == 2'd1)))) begin
        a_2_ce0 = 1'b1;
    end else begin
        a_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_380_p2 == 1'd0) & (j_mid2_reg_494 == 2'd1)))) begin
        a_3_ce0 = 1'b1;
    end else begin
        a_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_4_ce0 = 1'b1;
    end else begin
        a_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_380_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond1_reg_525 == 1'd0))) begin
        ap_phi_mux_ki_phi_fu_265_p4 = ki_1_reg_529;
    end else begin
        ap_phi_mux_ki_phi_fu_265_p4 = ki_reg_261;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_0_ce0 = 1'b1;
    end else begin
        b_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_1_ce0 = 1'b1;
    end else begin
        b_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        b_2_ce0 = 1'b1;
    end else begin
        b_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_0_address0 = res_0_addr_1_reg_510;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_0_address0 = tmp_mid2_fu_366_p1;
    end else begin
        res_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        res_0_ce0 = 1'b1;
    end else begin
        res_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_0_d0 = grp_fu_475_p3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_0_d0 = grp_fu_465_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_0_d0 = grp_fu_454_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_0_d0 = 16'd0;
    end else begin
        res_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (j_mid2_fu_344_p3 == 2'd0) & (exitcond_flatten_fu_326_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (j_mid2_reg_494 == 2'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0) & (j_mid2_reg_494 == 2'd0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0) & (j_mid2_reg_494 == 2'd0)))) begin
        res_0_we0 = 1'b1;
    end else begin
        res_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_1_address0 = res_1_addr_1_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_1_address0 = tmp_mid2_fu_366_p1;
    end else begin
        res_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        res_1_ce0 = 1'b1;
    end else begin
        res_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_1_d0 = grp_fu_475_p3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_1_d0 = grp_fu_465_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_1_d0 = grp_fu_454_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_1_d0 = 16'd0;
    end else begin
        res_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0) & (j_mid2_fu_344_p3 == 2'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (j_mid2_reg_494 == 2'd1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0) & (j_mid2_reg_494 == 2'd1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0) & (j_mid2_reg_494 == 2'd1)))) begin
        res_1_we0 = 1'b1;
    end else begin
        res_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        res_2_address0 = res_2_addr_1_reg_520;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_2_address0 = tmp_mid2_fu_366_p1;
    end else begin
        res_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        res_2_ce0 = 1'b1;
    end else begin
        res_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        res_2_d0 = grp_fu_475_p3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_2_d0 = grp_fu_465_p3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        res_2_d0 = grp_fu_454_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        res_2_d0 = 16'd0;
    end else begin
        res_2_d0 = 'bx;
    end
end

always @ (*) begin
    if (((~(j_mid2_fu_344_p3 == 2'd0) & ~(j_mid2_fu_344_p3 == 2'd1) & (1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd0)) | (~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | (~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0)) | (~(j_mid2_reg_494 == 2'd0) & ~(j_mid2_reg_494 == 2'd1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_reg_525 == 1'd0)))) begin
        res_2_we0 = 1'b1;
    end else begin
        res_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_380_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond1_fu_380_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_0_address0 = tmp_8_fu_401_p1;

assign a_1_address0 = tmp_8_fu_401_p1;

assign a_2_address0 = tmp_8_fu_401_p1;

assign a_3_address0 = tmp_8_fu_401_p1;

assign a_4_address0 = tmp_8_fu_401_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_481 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond1_reg_525 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_0_address0 = tmp_9_fu_410_p1;

assign b_1_address0 = tmp_9_fu_410_p1;

assign b_2_address0 = tmp_9_fu_410_p1;

assign exitcond1_fu_380_p2 = ((ap_phi_mux_ki_phi_fu_265_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_326_p2 = ((indvar_flatten_reg_228 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_338_p2 = ((j_reg_250 == 2'd3) ? 1'b1 : 1'b0);

assign i_s_fu_352_p2 = (i_reg_239 + 2'd1);

assign indvar_flatten_next_fu_332_p2 = (indvar_flatten_reg_228 + 4'd1);

assign j_1_fu_449_p2 = (j_mid2_reg_494 + 2'd1);

assign j_mid2_fu_344_p3 = ((exitcond_fu_338_p2[0:0] === 1'b1) ? 2'd0 : j_reg_250);

assign ki_1_fu_386_p2 = (ap_phi_mux_ki_phi_fu_265_p4 + 2'd1);

assign tmp_1_cast_mid2_fu_376_p1 = tmp_mid2_v_fu_358_p3;

assign tmp_6_cast_fu_392_p1 = ap_phi_mux_ki_phi_fu_265_p4;

assign tmp_7_fu_396_p2 = (tmp_1_cast_mid2_reg_505 + tmp_6_cast_fu_392_p1);

assign tmp_8_fu_401_p1 = tmp_7_fu_396_p2;

assign tmp_9_fu_410_p1 = ap_phi_mux_ki_phi_fu_265_p4;

assign tmp_mid2_fu_366_p1 = tmp_mid2_v_fu_358_p3;

assign tmp_mid2_v_fu_358_p3 = ((exitcond_fu_338_p2[0:0] === 1'b1) ? i_s_fu_352_p2 : i_reg_239);

always @ (posedge ap_clk) begin
    tmp_1_cast_mid2_reg_505[2] <= 1'b0;
end

endmodule //conv2d
