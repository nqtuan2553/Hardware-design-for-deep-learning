-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_0_ce0 : OUT STD_LOGIC;
    a_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_1_ce0 : OUT STD_LOGIC;
    a_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_2_ce0 : OUT STD_LOGIC;
    a_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_3_ce0 : OUT STD_LOGIC;
    a_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_4_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_4_ce0 : OUT STD_LOGIC;
    a_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    res_0_ce0 : OUT STD_LOGIC;
    res_0_we0 : OUT STD_LOGIC;
    res_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    res_1_ce0 : OUT STD_LOGIC;
    res_1_we0 : OUT STD_LOGIC;
    res_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    res_2_ce0 : OUT STD_LOGIC;
    res_2_we0 : OUT STD_LOGIC;
    res_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.599500,HLS_SYN_LAT=136,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=134,HLS_SYN_LUT=375}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ki_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal a_load_1_phi_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_2_phi_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal j_mid2_reg_494 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvar_flatten_next_fu_332_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_489 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_344_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_v_fu_358_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid2_v_reg_500 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_cast_mid2_fu_376_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_cast_mid2_reg_505 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_0_addr_1_reg_510 : STD_LOGIC_VECTOR (1 downto 0);
    signal res_1_addr_1_reg_515 : STD_LOGIC_VECTOR (1 downto 0);
    signal res_2_addr_1_reg_520 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ki_1_fu_386_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ki_1_reg_529 : STD_LOGIC_VECTOR (1 downto 0);
    signal b_0_load_reg_579 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_1_load_reg_584 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_2_load_reg_594 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_454_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_599 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_465_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_1_reg_604 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal j_1_fu_449_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal indvar_flatten_reg_228 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_239 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_ki_phi_fu_265_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_352_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_cast_fu_392_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_396_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_424_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_481 : BOOLEAN;

    component conv2d_mux_32_16_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv2d_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv2d_mac_muladddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv2d_mux_32_16_bkb_U1 : component conv2d_mux_32_16_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => res_0_q0,
        din1 => res_1_q0,
        din2 => res_2_q0,
        din3 => j_mid2_reg_494,
        dout => tmp_6_fu_424_p5);

    conv2d_mac_muladdcud_U2 : component conv2d_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272,
        din1 => b_0_load_reg_579,
        din2 => tmp_6_fu_424_p5,
        dout => grp_fu_454_p3);

    conv2d_mac_muladddEe_U3 : component conv2d_mac_muladddEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_load_1_phi_reg_283,
        din1 => b_1_load_reg_584,
        din2 => tmp_2_reg_599,
        dout => grp_fu_465_p3);

    conv2d_mac_muladddEe_U4 : component conv2d_mac_muladddEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => a_load_2_phi_reg_295,
        din1 => b_2_load_reg_594,
        din2 => tmp_14_1_reg_604,
        dout => grp_fu_475_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_481)) then
                if ((not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)))) then 
                    ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_2_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_1)) then 
                    ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_1_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_0)) then 
                    ap_phi_reg_pp0_iter0_a_load_0_phi_reg_272 <= a_0_q0;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_481)) then
                if ((not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)))) then 
                    ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_3_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_1)) then 
                    ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_2_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_0)) then 
                    ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283 <= a_1_q0;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_481)) then
                if ((not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)))) then 
                    ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_4_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_1)) then 
                    ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_3_q0;
                elsif ((j_mid2_reg_494 = ap_const_lv2_0)) then 
                    ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295 <= a_2_q0;
                end if;
            end if; 
        end if;
    end process;

    i_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_239 <= tmp_mid2_v_reg_500;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_239 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_228 <= indvar_flatten_next_reg_489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_228 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_250 <= j_1_fu_449_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ki_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_525 = ap_const_lv1_0))) then 
                ki_reg_261 <= ki_1_reg_529;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0))) then 
                ki_reg_261 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                a_load_1_phi_reg_283 <= ap_phi_reg_pp0_iter0_a_load_1_phi_reg_283;
                a_load_2_phi_reg_295 <= ap_phi_reg_pp0_iter0_a_load_2_phi_reg_295;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond1_reg_525 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                b_0_load_reg_579 <= b_0_q0;
                b_1_load_reg_584 <= b_1_q0;
                b_2_load_reg_594 <= b_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond1_reg_525 <= exitcond1_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next_reg_489 <= indvar_flatten_next_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0))) then
                j_mid2_reg_494 <= j_mid2_fu_344_p3;
                res_0_addr_1_reg_510 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
                res_1_addr_1_reg_515 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
                res_2_addr_1_reg_520 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
                    tmp_1_cast_mid2_reg_505(1 downto 0) <= tmp_1_cast_mid2_fu_376_p1(1 downto 0);
                tmp_mid2_v_reg_500 <= tmp_mid2_v_fu_358_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ki_1_reg_529 <= ki_1_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0))) then
                tmp_14_1_reg_604 <= grp_fu_465_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0))) then
                tmp_2_reg_599 <= grp_fu_454_p3;
            end if;
        end if;
    end process;
    tmp_1_cast_mid2_reg_505(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_326_p2, ap_CS_fsm_state2, exitcond1_fu_380_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_380_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    a_0_address0 <= tmp_8_fu_401_p1(3 - 1 downto 0);

    a_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_0_ce0 <= ap_const_logic_1;
        else 
            a_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_1_address0 <= tmp_8_fu_401_p1(3 - 1 downto 0);

    a_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_fu_380_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_1)))) then 
            a_1_ce0 <= ap_const_logic_1;
        else 
            a_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_2_address0 <= tmp_8_fu_401_p1(3 - 1 downto 0);

    a_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_fu_380_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_1)))) then 
            a_2_ce0 <= ap_const_logic_1;
        else 
            a_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_3_address0 <= tmp_8_fu_401_p1(3 - 1 downto 0);

    a_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_fu_380_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_380_p2 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_1)))) then 
            a_3_ce0 <= ap_const_logic_1;
        else 
            a_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_4_address0 <= tmp_8_fu_401_p1(3 - 1 downto 0);

    a_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_4_ce0 <= ap_const_logic_1;
        else 
            a_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_481_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, exitcond1_reg_525)
    begin
                ap_condition_481 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (exitcond1_reg_525 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond1_fu_380_p2)
    begin
        if ((exitcond1_fu_380_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond_flatten_fu_326_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ki_phi_fu_265_p4_assign_proc : process(ki_reg_261, exitcond1_reg_525, ap_CS_fsm_pp0_stage0, ki_1_reg_529, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond1_reg_525 = ap_const_lv1_0))) then 
            ap_phi_mux_ki_phi_fu_265_p4 <= ki_1_reg_529;
        else 
            ap_phi_mux_ki_phi_fu_265_p4 <= ki_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_flatten_fu_326_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_0_address0 <= tmp_9_fu_410_p1(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_1_address0 <= tmp_9_fu_410_p1(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    b_2_address0 <= tmp_9_fu_410_p1(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_380_p2 <= "1" when (ap_phi_mux_ki_phi_fu_265_p4 = ap_const_lv2_3) else "0";
    exitcond_flatten_fu_326_p2 <= "1" when (indvar_flatten_reg_228 = ap_const_lv4_9) else "0";
    exitcond_fu_338_p2 <= "1" when (j_reg_250 = ap_const_lv2_3) else "0";
    i_s_fu_352_p2 <= std_logic_vector(unsigned(i_reg_239) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_332_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_228) + unsigned(ap_const_lv4_1));
    j_1_fu_449_p2 <= std_logic_vector(unsigned(j_mid2_reg_494) + unsigned(ap_const_lv2_1));
    j_mid2_fu_344_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_338_p2(0) = '1') else 
        j_reg_250;
    ki_1_fu_386_p2 <= std_logic_vector(unsigned(ap_phi_mux_ki_phi_fu_265_p4) + unsigned(ap_const_lv2_1));

    res_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, res_0_addr_1_reg_510, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_mid2_fu_366_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_0_address0 <= res_0_addr_1_reg_510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_0_address0 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
        else 
            res_0_address0 <= "XX";
        end if; 
    end process;


    res_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            res_0_ce0 <= ap_const_logic_1;
        else 
            res_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_0_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, grp_fu_454_p3, ap_CS_fsm_pp0_stage2, grp_fu_465_p3, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, grp_fu_475_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_0_d0 <= grp_fu_475_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_0_d0 <= grp_fu_465_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_0_d0 <= grp_fu_454_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_0_d0 <= ap_const_lv16_0;
        else 
            res_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_0_we0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_reg_525, exitcond_flatten_fu_326_p2, ap_CS_fsm_state2, j_mid2_fu_344_p3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (j_mid2_fu_344_p3 = ap_const_lv2_0) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (j_mid2_reg_494 = ap_const_lv2_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_0)))) then 
            res_0_we0 <= ap_const_logic_1;
        else 
            res_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, res_1_addr_1_reg_515, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_mid2_fu_366_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_1_address0 <= res_1_addr_1_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_1_address0 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
        else 
            res_1_address0 <= "XX";
        end if; 
    end process;


    res_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            res_1_ce0 <= ap_const_logic_1;
        else 
            res_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_1_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, grp_fu_454_p3, ap_CS_fsm_pp0_stage2, grp_fu_465_p3, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, grp_fu_475_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_1_d0 <= grp_fu_475_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_1_d0 <= grp_fu_465_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_1_d0 <= grp_fu_454_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_1_d0 <= ap_const_lv16_0;
        else 
            res_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_1_we0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_reg_525, exitcond_flatten_fu_326_p2, ap_CS_fsm_state2, j_mid2_fu_344_p3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0) and (j_mid2_fu_344_p3 = ap_const_lv2_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (j_mid2_reg_494 = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0) and (j_mid2_reg_494 = ap_const_lv2_1)))) then 
            res_1_we0 <= ap_const_logic_1;
        else 
            res_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    res_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, res_2_addr_1_reg_520, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_mid2_fu_366_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            res_2_address0 <= res_2_addr_1_reg_520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_2_address0 <= tmp_mid2_fu_366_p1(2 - 1 downto 0);
        else 
            res_2_address0 <= "XX";
        end if; 
    end process;


    res_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            res_2_ce0 <= ap_const_logic_1;
        else 
            res_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_2_d0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, grp_fu_454_p3, ap_CS_fsm_pp0_stage2, grp_fu_465_p3, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, grp_fu_475_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            res_2_d0 <= grp_fu_475_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_2_d0 <= grp_fu_465_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            res_2_d0 <= grp_fu_454_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_2_d0 <= ap_const_lv16_0;
        else 
            res_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_2_we0_assign_proc : process(ap_enable_reg_pp0_iter0, j_mid2_reg_494, exitcond1_reg_525, exitcond_flatten_fu_326_p2, ap_CS_fsm_state2, j_mid2_fu_344_p3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((not((j_mid2_fu_344_p3 = ap_const_lv2_0)) and not((j_mid2_fu_344_p3 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_326_p2 = ap_const_lv1_0)) or (not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0)) or (not((j_mid2_reg_494 = ap_const_lv2_0)) and not((j_mid2_reg_494 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond1_reg_525 = ap_const_lv1_0)))) then 
            res_2_we0 <= ap_const_logic_1;
        else 
            res_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_cast_mid2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_fu_358_p3),3));
    tmp_6_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ki_phi_fu_265_p4),3));
    tmp_7_fu_396_p2 <= std_logic_vector(unsigned(tmp_1_cast_mid2_reg_505) + unsigned(tmp_6_cast_fu_392_p1));
    tmp_8_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_396_p2),64));
    tmp_9_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ki_phi_fu_265_p4),64));
    tmp_mid2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_v_fu_358_p3),64));
    tmp_mid2_v_fu_358_p3 <= 
        i_s_fu_352_p2 when (exitcond_fu_338_p2(0) = '1') else 
        i_reg_239;
end behav;
