-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce0 : OUT STD_LOGIC;
    b_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_0_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_0_ce1 : OUT STD_LOGIC;
    b_0_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce0 : OUT STD_LOGIC;
    b_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_1_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_1_ce1 : OUT STD_LOGIC;
    b_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce0 : OUT STD_LOGIC;
    b_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_2_address1 : OUT STD_LOGIC_VECTOR (1 downto 0);
    b_2_ce1 : OUT STD_LOGIC;
    b_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv2d,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.491000,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=679,HLS_SYN_LUT=1225}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_318 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal exitcond3_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_333 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond3_reg_928_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_344_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_932 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_939 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_388_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_956 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_956_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_0_2_fu_398_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_0_2_reg_963 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_418_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_0_1_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_0_1_reg_979 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_450_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_reg_985 : STD_LOGIC_VECTOR (4 downto 0);
    signal b_1_load_1_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_2_load_1_reg_1003 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1008 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_fu_461_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_reg_1013 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_0_2_fu_471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_0_2_reg_1018 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_fu_499_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_reg_1034 : STD_LOGIC_VECTOR (15 downto 0);
    signal b_1_load_2_reg_1040 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_1045 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_1050 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_2_fu_509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_2_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_1_fu_518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_1_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_10_0_1_2_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_0_1_2_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_2_fu_525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_1_2_reg_1072 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_548_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_reg_1078 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp1_fu_570_p2 : signal is "no";
    signal tmp1_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_808_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_1100 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_1_fu_574_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_1_reg_1105 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal a_load_6_reg_1120 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_7_reg_1125 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_1_fu_599_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_2_1_reg_1130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_10_0_2_1_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_0_2_1_reg_1145 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_1_fu_626_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_1_reg_1150 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_0_2_2_fu_629_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_0_2_2_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_2_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_2_reg_1162 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_1168 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_0_2_fu_643_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_0_2_reg_1173 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1178 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_10_1_1_2_fu_667_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_1_2_reg_1193 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_1_2_fu_671_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_1_1_2_reg_1198 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_2_2_fu_676_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_2_2_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_685_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp8_fu_685_p2 : signal is "no";
    signal tmp8_reg_1208 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_830_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1213 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_836_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_1218 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal grp_fu_841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_reg_1228 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_2_1_2_fu_707_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_2_1_2_reg_1233 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_846_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp16_reg_1238 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_721_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp15_fu_721_p2 : signal is "no";
    signal tmp15_reg_1243 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_852_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp17_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_857_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp19_reg_1253 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_fu_732_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_0_2_reg_1258 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_i_phi_fu_322_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_3_cast_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_16_cast_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal tmp_18_cast_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_23_cast_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_cast_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_24_cast_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal tmp_25_cast_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal tmp_20_cast_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal tmp_9_cast_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_0_2_2_fu_740_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_1_2_2_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_2_2_2_fu_780_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_354_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_350_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_362_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_377_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_fu_394_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_422_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_439_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_0_1_cast_fu_436_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_446_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_1_fu_461_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_0_0_1_fu_428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_475_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_0_1_fu_503_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_1_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_fu_509_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_0_0_2_fu_467_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_0_1_2_fu_528_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_1_2_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_537_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_0_2_cast_fu_534_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_544_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_1_1_fu_574_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_1_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_0_1_1_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_579_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_589_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_2_1_fu_599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_1_fu_599_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_603_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_23_fu_613_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_0_2_2_fu_637_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_0_2_2_fu_637_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_647_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_657_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_1_1_2_fu_671_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_1_2_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_2_2_fu_680_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_1_2_2_fu_680_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_24_fu_689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_2_1_2_fu_707_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_1_2_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_2_2_fu_716_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_2_2_2_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_736_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp4_fu_736_p2 : signal is "no";
    signal tmp_8_fu_746_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_871_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp11_fu_756_p2 : signal is "no";
    signal tmp_11_fu_766_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_877_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp18_fu_776_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of tmp18_fu_776_p2 : signal is "no";
    signal grp_fu_786_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_802_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_802_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_808_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_816_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_830_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_830_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_830_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_836_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_836_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_841_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_846_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_852_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_852_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_857_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_857_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_871_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_871_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_877_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv2d_mac_muladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv2d_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv2d_mac_muladdbkb_U1 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_q0,
        din1 => grp_fu_786_p1,
        din2 => grp_fu_786_p2,
        dout => grp_fu_786_p3);

    conv2d_mac_muladdbkb_U2 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_329,
        din1 => grp_fu_794_p1,
        din2 => grp_fu_794_p2,
        dout => grp_fu_794_p3);

    conv2d_mac_muladdbkb_U3 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_802_p0,
        din1 => grp_fu_802_p1,
        din2 => tmp_13_1_reg_1013,
        dout => grp_fu_802_p3);

    conv2d_mac_muladdbkb_U4 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_load_1_reg_998,
        din1 => grp_fu_808_p1,
        din2 => grp_fu_808_p2,
        dout => grp_fu_808_p3);

    conv2d_mac_muladdbkb_U5 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => b_1_load_2_reg_1040,
        din1 => a_load_7_reg_1125,
        din2 => grp_fu_816_p2,
        dout => grp_fu_816_p3);

    conv2d_mac_muladdbkb_U6 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_824_p0,
        din1 => a_q1,
        din2 => tmp_13_1_1_reg_1105,
        dout => grp_fu_824_p3);

    conv2d_mac_muladdbkb_U7 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_830_p0,
        din1 => grp_fu_830_p1,
        din2 => grp_fu_830_p2,
        dout => grp_fu_830_p3);

    conv2d_mac_muladdbkb_U8 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_836_p0,
        din1 => grp_fu_836_p1,
        din2 => tmp_13_2_reg_1055,
        dout => grp_fu_836_p3);

    conv2d_mac_muladdbkb_U9 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_841_p0,
        din1 => grp_fu_841_p1,
        din2 => tmp_13_1_1_2_reg_1198,
        dout => grp_fu_841_p3);

    conv2d_mac_muladdbkb_U10 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_846_p0,
        din1 => a_q0,
        din2 => tmp_13_2_1_reg_1130,
        dout => grp_fu_846_p3);

    conv2d_mac_muladdbkb_U11 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_852_p0,
        din1 => grp_fu_852_p1,
        din2 => tmp_13_2_1_2_reg_1233,
        dout => grp_fu_852_p3);

    conv2d_mac_muladdbkb_U12 : component conv2d_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_857_p0,
        din1 => grp_fu_857_p1,
        din2 => grp_fu_857_p2,
        dout => grp_fu_857_p3);

    conv2d_mac_muladdcud_U13 : component conv2d_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => reg_333,
        din1 => a_load_6_reg_1120,
        din2 => tmp7_reg_1168,
        dout => grp_fu_863_p3);

    conv2d_mac_muladdcud_U14 : component conv2d_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_871_p0,
        din1 => grp_fu_871_p1,
        din2 => tmp12_reg_1213,
        dout => grp_fu_871_p3);

    conv2d_mac_muladdcud_U15 : component conv2d_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_877_p0,
        din1 => grp_fu_877_p1,
        din2 => tmp19_reg_1253,
        dout => grp_fu_877_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_318 <= i_1_reg_932;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_318 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_333 <= b_0_q0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_333 <= b_0_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                a_load_6_reg_1120 <= a_q0;
                a_load_7_reg_1125 <= a_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                b_1_load_1_reg_998 <= b_1_q1;
                b_2_load_1_reg_1003 <= b_2_q1;
                tmp2_reg_1008 <= grp_fu_786_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                b_1_load_2_reg_1040 <= b_1_q0;
                tmp3_reg_1045 <= grp_fu_794_p3;
                tmp9_reg_1050 <= grp_fu_802_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond3_reg_928 <= exitcond3_fu_338_p2;
                exitcond3_reg_928_pp0_iter1_reg <= exitcond3_reg_928;
                tmp_9_reg_956_pp0_iter1_reg <= tmp_9_reg_956;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_1_reg_932 <= i_1_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_329 <= b_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp10_reg_1228 <= grp_fu_841_p3;
                tmp16_reg_1238 <= grp_fu_846_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                tmp12_reg_1213 <= grp_fu_830_p3;
                tmp14_reg_1218 <= grp_fu_836_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp15_reg_1243 <= tmp15_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp17_reg_1248 <= grp_fu_852_p3;
                tmp19_reg_1253 <= grp_fu_857_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp1_reg_1095 <= tmp1_fu_570_p2;
                tmp_10_0_1_2_reg_1066 <= tmp_10_0_1_2_fu_521_p1;
                tmp_12_0_1_1_reg_1060 <= tmp_12_0_1_1_fu_518_p1;
                tmp_12_0_1_2_reg_1072 <= tmp_12_0_1_2_fu_525_p1;
                tmp_13_1_1_reg_1105 <= tmp_13_1_1_fu_574_p2;
                tmp_20_reg_1078 <= tmp_20_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp5_reg_1100 <= grp_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp7_reg_1168 <= grp_fu_816_p3;
                tmp_reg_1178 <= grp_fu_824_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                tmp8_reg_1208 <= tmp8_fu_685_p2;
                tmp_10_1_1_2_reg_1193 <= tmp_10_1_1_2_fu_667_p1;
                tmp_10_1_2_2_reg_1203 <= tmp_10_1_2_2_fu_676_p1;
                tmp_13_1_1_2_reg_1198 <= tmp_13_1_1_2_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                tmp_10_0_2_1_reg_1145 <= tmp_10_0_2_1_fu_623_p1;
                tmp_10_0_2_2_reg_1156 <= tmp_10_0_2_2_fu_629_p1;
                tmp_10_1_0_2_reg_1173 <= tmp_10_1_0_2_fu_643_p1;
                tmp_12_0_2_1_reg_1150 <= tmp_12_0_2_1_fu_626_p1;
                tmp_12_0_2_2_reg_1162 <= tmp_12_0_2_2_fu_633_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_10_reg_974 <= tmp_10_fu_418_p1;
                tmp_12_0_0_1_reg_979 <= tmp_12_0_0_1_fu_432_p1;
                tmp_13_1_reg_1013 <= tmp_13_1_fu_461_p2;
                tmp_14_reg_985 <= tmp_14_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_12_0_0_2_reg_1018 <= tmp_12_0_0_2_fu_471_p1;
                tmp_12_0_1_reg_1034 <= tmp_12_0_1_fu_499_p1;
                tmp_13_2_reg_1055 <= tmp_13_2_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_12_0_2_reg_1258 <= tmp_12_0_2_fu_732_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                tmp_13_2_1_2_reg_1233 <= tmp_13_2_1_2_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_13_2_1_reg_1130 <= tmp_13_2_1_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_reg_939 <= tmp_3_fu_366_p2;
                tmp_7_0_2_reg_963 <= tmp_7_0_2_fu_398_p2;
                tmp_9_reg_956 <= tmp_9_fu_388_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, exitcond3_fu_338_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond3_fu_338_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond3_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage0, tmp_3_cast_fu_372_p1, tmp_5_cast_fu_409_p1, ap_block_pp0_stage1, tmp_17_cast_fu_480_p1, ap_block_pp0_stage2, tmp_22_cast_fu_554_p1, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_24_cast_fu_594_p1, tmp_19_cast_fu_608_p1, ap_block_pp0_stage5, tmp_7_cast_fu_652_p1, ap_block_pp0_stage6, tmp_26_cast_fu_694_p1, ap_block_pp0_stage7)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                a_address0 <= tmp_26_cast_fu_694_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                a_address0 <= tmp_7_cast_fu_652_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                a_address0 <= tmp_19_cast_fu_608_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_address0 <= tmp_24_cast_fu_594_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                a_address0 <= tmp_22_cast_fu_554_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address0 <= tmp_17_cast_fu_480_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address0 <= tmp_5_cast_fu_409_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address0 <= tmp_3_cast_fu_372_p1(5 - 1 downto 0);
            else 
                a_address0 <= "XXXXX";
            end if;
        else 
            a_address0 <= "XXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0, tmp_4_cast_fu_383_p1, ap_block_pp0_stage1, tmp_16_cast_fu_456_p1, ap_block_pp0_stage2, tmp_18_cast_fu_490_p1, ap_block_pp0_stage3, tmp_23_cast_fu_565_p1, tmp_6_cast_fu_584_p1, ap_block_pp0_stage4, ap_block_pp0_stage5, tmp_25_cast_fu_618_p1, ap_block_pp0_stage6, tmp_20_cast_fu_662_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                a_address1 <= tmp_20_cast_fu_662_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                a_address1 <= tmp_25_cast_fu_618_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                a_address1 <= tmp_6_cast_fu_584_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                a_address1 <= tmp_23_cast_fu_565_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                a_address1 <= tmp_18_cast_fu_490_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                a_address1 <= tmp_16_cast_fu_456_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                a_address1 <= tmp_4_cast_fu_383_p1(5 - 1 downto 0);
            else 
                a_address1 <= "XXXXX";
            end if;
        else 
            a_address1 <= "XXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond3_fu_338_p2)
    begin
        if ((exitcond3_fu_338_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_322_p4_assign_proc : process(i_reg_318, exitcond3_reg_928, ap_CS_fsm_pp0_stage0, i_1_reg_932, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond3_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_322_p4 <= i_1_reg_932;
        else 
            ap_phi_mux_i_phi_fu_322_p4 <= i_reg_318;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_0_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_0_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_0_address0 <= "XX";
            end if;
        else 
            b_0_address0 <= "XX";
        end if; 
    end process;

    b_0_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    b_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_0_ce0 <= ap_const_logic_1;
        else 
            b_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_0_ce1 <= ap_const_logic_1;
        else 
            b_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_1_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_1_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_1_address0 <= "XX";
            end if;
        else 
            b_1_address0 <= "XX";
        end if; 
    end process;

    b_1_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    b_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_1_ce0 <= ap_const_logic_1;
        else 
            b_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_1_ce1 <= ap_const_logic_1;
        else 
            b_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                b_2_address0 <= ap_const_lv64_2(2 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                b_2_address0 <= ap_const_lv64_0(2 - 1 downto 0);
            else 
                b_2_address0 <= "XX";
            end if;
        else 
            b_2_address0 <= "XX";
        end if; 
    end process;

    b_2_address1 <= ap_const_lv64_1(2 - 1 downto 0);

    b_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            b_2_ce0 <= ap_const_logic_1;
        else 
            b_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            b_2_ce1 <= ap_const_logic_1;
        else 
            b_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_338_p2 <= "1" when (ap_phi_mux_i_phi_fu_322_p4 = ap_const_lv2_3) else "0";
    grp_fu_786_p1 <= tmp_10_0_0_1_fu_428_p1(8 - 1 downto 0);
    grp_fu_786_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_12_fu_422_p0) * signed(tmp_12_fu_422_p1))), 16));
    grp_fu_794_p1 <= tmp_10_0_0_2_fu_467_p1(8 - 1 downto 0);
    grp_fu_794_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_0_1_fu_503_p0) * signed(tmp_13_0_1_fu_503_p1))), 16));
    grp_fu_802_p0 <= tmp_12_0_0_1_reg_979(8 - 1 downto 0);
    grp_fu_802_p1 <= tmp_10_0_0_2_fu_467_p1(8 - 1 downto 0);
    grp_fu_808_p1 <= tmp_10_0_1_1_fu_514_p1(8 - 1 downto 0);
    grp_fu_808_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_0_1_2_fu_528_p0) * signed(tmp_13_0_1_2_fu_528_p1))), 16));
    grp_fu_816_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_0_2_2_fu_637_p0) * signed(tmp_13_0_2_2_fu_637_p1))), 16));
    grp_fu_824_p0 <= tmp_12_0_0_2_reg_1018(8 - 1 downto 0);
    grp_fu_830_p0 <= tmp_12_0_2_1_reg_1150(8 - 1 downto 0);
    grp_fu_830_p1 <= tmp_10_0_2_2_reg_1156(8 - 1 downto 0);
    grp_fu_830_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_1_2_2_fu_680_p0) * signed(tmp_13_1_2_2_fu_680_p1))), 16));
    grp_fu_836_p0 <= tmp_12_0_0_1_reg_979(8 - 1 downto 0);
    grp_fu_836_p1 <= tmp_10_1_0_2_reg_1173(8 - 1 downto 0);
    grp_fu_841_p0 <= tmp_12_0_1_1_reg_1060(8 - 1 downto 0);
    grp_fu_841_p1 <= tmp_10_0_1_2_reg_1066(8 - 1 downto 0);
    grp_fu_846_p0 <= tmp_12_0_0_2_reg_1018(8 - 1 downto 0);
    grp_fu_852_p0 <= tmp_12_0_1_1_reg_1060(8 - 1 downto 0);
    grp_fu_852_p1 <= tmp_10_1_1_2_reg_1193(8 - 1 downto 0);
    grp_fu_857_p0 <= tmp_12_0_2_1_reg_1150(8 - 1 downto 0);
    grp_fu_857_p1 <= tmp_10_1_2_2_reg_1203(8 - 1 downto 0);
    grp_fu_857_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_2_2_2_fu_716_p0) * signed(tmp_13_2_2_2_fu_716_p1))), 16));
    grp_fu_871_p0 <= tmp_12_0_2_reg_1258(8 - 1 downto 0);
    grp_fu_871_p1 <= tmp_10_0_2_1_reg_1145(8 - 1 downto 0);
    grp_fu_877_p0 <= tmp_12_0_2_reg_1258(8 - 1 downto 0);
    grp_fu_877_p1 <= tmp_10_0_2_2_reg_1156(8 - 1 downto 0);
    i_1_fu_344_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_322_p4) + unsigned(ap_const_lv2_1));
    p_shl1_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_439_p3),5));
    p_shl3_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_354_p3),5));
    p_shl_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_537_p3),6));

    res_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_9_cast_fu_725_p1, tmp_11_cast_fu_751_p1, tmp_14_cast_fu_771_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_address0 <= tmp_14_cast_fu_771_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_address0 <= tmp_11_cast_fu_751_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_address0 <= tmp_9_cast_fu_725_p1(4 - 1 downto 0);
            else 
                res_address0 <= "XXXX";
            end if;
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    res_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage4, tmp_14_0_2_2_fu_740_p2, tmp_14_1_2_2_fu_760_p2, tmp_14_2_2_2_fu_780_p2)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                res_d0 <= tmp_14_2_2_2_fu_780_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                res_d0 <= tmp_14_1_2_2_fu_760_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                res_d0 <= tmp_14_0_2_2_fu_740_p2;
            else 
                res_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    res_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, exitcond3_reg_928_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((exitcond3_reg_928_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond3_reg_928_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((exitcond3_reg_928_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp11_fu_756_p2 <= std_logic_vector(signed(tmp10_reg_1228) + signed(grp_fu_871_p3));
    tmp15_fu_721_p2 <= std_logic_vector(signed(tmp14_reg_1218) + signed(tmp16_reg_1238));
    tmp18_fu_776_p2 <= std_logic_vector(signed(tmp17_reg_1248) + signed(grp_fu_877_p3));
    tmp1_fu_570_p2 <= std_logic_vector(signed(tmp2_reg_1008) + signed(tmp3_reg_1045));
    tmp4_fu_736_p2 <= std_logic_vector(signed(tmp5_reg_1100) + signed(grp_fu_863_p3));
    tmp8_fu_685_p2 <= std_logic_vector(signed(tmp9_reg_1050) + signed(tmp_reg_1178));
        tmp_10_0_0_1_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),16));

        tmp_10_0_0_2_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        tmp_10_0_1_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        tmp_10_0_1_2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),16));

        tmp_10_0_2_1_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_load_7_reg_1125),16));

        tmp_10_0_2_2_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        tmp_10_1_0_2_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),16));

        tmp_10_1_1_2_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q0),16));

        tmp_10_1_2_2_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a_q1),16));

        tmp_10_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_0_q0),16));

        tmp_11_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_746_p2),64));

    tmp_11_fu_766_p2 <= std_logic_vector(signed(tmp_9_reg_956_pp0_iter1_reg) + signed(ap_const_lv5_2));
        tmp_12_0_0_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_q0),16));

        tmp_12_0_0_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_329),16));

        tmp_12_0_1_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_load_1_reg_998),16));

        tmp_12_0_1_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_2_load_1_reg_1003),16));

        tmp_12_0_1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_333),16));

        tmp_12_0_2_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_1_load_2_reg_1040),16));

        tmp_12_0_2_2_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_329),16));

        tmp_12_0_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_333),16));

    tmp_12_fu_422_p0 <= tmp_10_fu_418_p1(8 - 1 downto 0);
    tmp_12_fu_422_p1 <= a_q0;
    tmp_13_0_1_2_fu_528_p0 <= b_2_load_1_reg_1003;
    tmp_13_0_1_2_fu_528_p1 <= a_q1;
    tmp_13_0_1_fu_503_p0 <= reg_333;
    tmp_13_0_1_fu_503_p1 <= a_q1;
    tmp_13_0_2_2_fu_637_p0 <= reg_329;
    tmp_13_0_2_2_fu_637_p1 <= a_q0;
    tmp_13_1_1_2_fu_671_p0 <= tmp_12_0_1_2_reg_1072(8 - 1 downto 0);
    tmp_13_1_1_2_fu_671_p1 <= a_q0;
    tmp_13_1_1_2_fu_671_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_1_1_2_fu_671_p0) * signed(tmp_13_1_1_2_fu_671_p1))), 16));
    tmp_13_1_1_fu_574_p0 <= tmp_12_0_1_reg_1034(8 - 1 downto 0);
    tmp_13_1_1_fu_574_p1 <= tmp_10_0_1_1_fu_514_p1(8 - 1 downto 0);
    tmp_13_1_1_fu_574_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_1_1_fu_574_p0) * signed(tmp_13_1_1_fu_574_p1))), 16));
    tmp_13_1_2_2_fu_680_p0 <= tmp_12_0_2_2_reg_1162(8 - 1 downto 0);
    tmp_13_1_2_2_fu_680_p1 <= a_q1;
    tmp_13_1_fu_461_p0 <= tmp_10_fu_418_p1(8 - 1 downto 0);
    tmp_13_1_fu_461_p1 <= tmp_10_0_0_1_fu_428_p1(8 - 1 downto 0);
    tmp_13_1_fu_461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_1_fu_461_p0) * signed(tmp_13_1_fu_461_p1))), 16));
    tmp_13_2_1_2_fu_707_p0 <= tmp_12_0_1_2_reg_1072(8 - 1 downto 0);
    tmp_13_2_1_2_fu_707_p1 <= a_q1;
    tmp_13_2_1_2_fu_707_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_2_1_2_fu_707_p0) * signed(tmp_13_2_1_2_fu_707_p1))), 16));
    tmp_13_2_1_fu_599_p0 <= tmp_12_0_1_reg_1034(8 - 1 downto 0);
    tmp_13_2_1_fu_599_p1 <= tmp_10_0_1_2_reg_1066(8 - 1 downto 0);
    tmp_13_2_1_fu_599_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_2_1_fu_599_p0) * signed(tmp_13_2_1_fu_599_p1))), 16));
    tmp_13_2_2_2_fu_716_p0 <= tmp_12_0_2_2_reg_1162(8 - 1 downto 0);
    tmp_13_2_2_2_fu_716_p1 <= a_q0;
    tmp_13_2_fu_509_p0 <= tmp_10_reg_974(8 - 1 downto 0);
    tmp_13_2_fu_509_p1 <= tmp_10_0_0_2_fu_467_p1(8 - 1 downto 0);
    tmp_13_2_fu_509_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_13_2_fu_509_p0) * signed(tmp_13_2_fu_509_p1))), 16));
    tmp_13_fu_439_p3 <= (i_1_reg_932 & ap_const_lv2_0);
    tmp_14_0_2_2_fu_740_p2 <= std_logic_vector(unsigned(tmp1_reg_1095) + unsigned(tmp4_fu_736_p2));
    tmp_14_1_2_2_fu_760_p2 <= std_logic_vector(unsigned(tmp8_reg_1208) + unsigned(tmp11_fu_756_p2));
    tmp_14_2_2_2_fu_780_p2 <= std_logic_vector(unsigned(tmp15_reg_1243) + unsigned(tmp18_fu_776_p2));
        tmp_14_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_766_p2),64));

    tmp_14_fu_450_p2 <= std_logic_vector(unsigned(tmp_8_0_1_cast_fu_436_p1) + unsigned(p_shl1_cast_fu_446_p1));
    tmp_15_fu_475_p2 <= std_logic_vector(unsigned(tmp_14_reg_985) + unsigned(ap_const_lv5_1));
    tmp_16_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_450_p2),64));
    tmp_16_fu_485_p2 <= std_logic_vector(unsigned(tmp_14_reg_985) + unsigned(ap_const_lv5_2));
    tmp_17_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_475_p2),64));
    tmp_17_fu_603_p2 <= std_logic_vector(unsigned(tmp_14_reg_985) + unsigned(ap_const_lv5_3));
    tmp_18_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_485_p2),64));
    tmp_18_fu_657_p2 <= std_logic_vector(unsigned(tmp_14_reg_985) + unsigned(ap_const_lv5_4));
    tmp_19_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_603_p2),64));
    tmp_19_fu_537_p3 <= (tmp_7_0_2_reg_963 & ap_const_lv2_0);
    tmp_1_cast_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_322_p4),3));
    tmp_1_fu_354_p3 <= (ap_phi_mux_i_phi_fu_322_p4 & ap_const_lv2_0);
    tmp_20_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_657_p2),64));
    tmp_20_fu_548_p2 <= std_logic_vector(unsigned(tmp_8_0_2_cast_fu_534_p1) + unsigned(p_shl_cast_fu_544_p1));
    tmp_21_fu_559_p2 <= std_logic_vector(unsigned(tmp_20_fu_548_p2) + unsigned(ap_const_lv6_1));
    tmp_22_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_548_p2),64));
    tmp_22_fu_589_p2 <= std_logic_vector(unsigned(tmp_20_reg_1078) + unsigned(ap_const_lv6_2));
    tmp_23_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_559_p2),64));
    tmp_23_fu_613_p2 <= std_logic_vector(unsigned(tmp_20_reg_1078) + unsigned(ap_const_lv6_3));
        tmp_24_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_589_p2),64));

    tmp_24_fu_689_p2 <= std_logic_vector(unsigned(tmp_20_reg_1078) + unsigned(ap_const_lv6_4));
        tmp_25_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_613_p2),64));

        tmp_26_cast_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_689_p2),64));

    tmp_3_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_366_p2),64));
    tmp_3_fu_366_p2 <= std_logic_vector(unsigned(tmp_cast_fu_350_p1) + unsigned(p_shl3_cast_fu_362_p1));
    tmp_4_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_377_p2),64));
    tmp_4_fu_377_p2 <= std_logic_vector(unsigned(tmp_3_fu_366_p2) + unsigned(ap_const_lv5_1));
    tmp_5_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_404_p2),64));
    tmp_5_fu_404_p2 <= std_logic_vector(unsigned(tmp_3_reg_939) + unsigned(ap_const_lv5_2));
    tmp_6_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_579_p2),64));
    tmp_6_fu_579_p2 <= std_logic_vector(unsigned(tmp_3_reg_939) + unsigned(ap_const_lv5_3));
    tmp_7_0_2_fu_398_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_394_p1) + unsigned(ap_const_lv3_2));
    tmp_7_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_647_p2),64));
    tmp_7_fu_647_p2 <= std_logic_vector(unsigned(tmp_3_reg_939) + unsigned(ap_const_lv5_4));
    tmp_8_0_1_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_932),5));
    tmp_8_0_2_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_0_2_reg_963),6));
    tmp_8_fu_746_p2 <= std_logic_vector(signed(tmp_9_reg_956_pp0_iter1_reg) + signed(ap_const_lv5_1));
        tmp_9_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_956_pp0_iter1_reg),64));

    tmp_9_fu_388_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_362_p1) - unsigned(tmp_cast_fu_350_p1));
    tmp_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_322_p4),5));
end behav;
