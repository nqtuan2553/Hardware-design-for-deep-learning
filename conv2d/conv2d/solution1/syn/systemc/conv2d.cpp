// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv2d.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv2d::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv2d::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> conv2d::ap_ST_fsm_state1 = "1";
const sc_lv<7> conv2d::ap_ST_fsm_state2 = "10";
const sc_lv<7> conv2d::ap_ST_fsm_state3 = "100";
const sc_lv<7> conv2d::ap_ST_fsm_state4 = "1000";
const sc_lv<7> conv2d::ap_ST_fsm_state5 = "10000";
const sc_lv<7> conv2d::ap_ST_fsm_state6 = "100000";
const sc_lv<7> conv2d::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> conv2d::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv2d::ap_const_lv32_1 = "1";
const sc_lv<1> conv2d::ap_const_lv1_0 = "0";
const sc_lv<32> conv2d::ap_const_lv32_2 = "10";
const sc_lv<32> conv2d::ap_const_lv32_3 = "11";
const sc_lv<32> conv2d::ap_const_lv32_4 = "100";
const sc_lv<32> conv2d::ap_const_lv32_5 = "101";
const sc_lv<2> conv2d::ap_const_lv2_0 = "00";
const sc_lv<1> conv2d::ap_const_lv1_1 = "1";
const sc_lv<32> conv2d::ap_const_lv32_6 = "110";
const sc_lv<16> conv2d::ap_const_lv16_0 = "0000000000000000";
const sc_lv<2> conv2d::ap_const_lv2_3 = "11";
const sc_lv<2> conv2d::ap_const_lv2_1 = "1";
const bool conv2d::ap_const_boolean_1 = true;

conv2d::conv2d(sc_module_name name) : sc_module(name), mVcdFile(0) {
    conv2d_mac_muladdbkb_U1 = new conv2d_mac_muladdbkb<1,1,8,8,16,16>("conv2d_mac_muladdbkb_U1");
    conv2d_mac_muladdbkb_U1->din0(b_load_reg_397);
    conv2d_mac_muladdbkb_U1->din1(a_load_reg_392);
    conv2d_mac_muladdbkb_U1->din2(res_q0);
    conv2d_mac_muladdbkb_U1->dout(grp_fu_311_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_21_cast_fu_286_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_127_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_127_p2 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_22_cast_fu_300_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond1_fu_195_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ki_reg_101 );

    SC_METHOD(thread_exitcond2_fu_165_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_exitcond3_fu_127_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_exitcond_fu_260_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( kj_reg_112 );

    SC_METHOD(thread_i_1_fu_133_p2);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_i_cast_fu_123_p1);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_j_1_fu_171_p2);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_j_cast_fu_161_p1);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_ki_1_fu_201_p2);
    sensitive << ( ki_reg_101 );

    SC_METHOD(thread_ki_cast_fu_191_p1);
    sensitive << ( ki_reg_101 );

    SC_METHOD(thread_kj_1_fu_266_p2);
    sensitive << ( kj_reg_112 );

    SC_METHOD(thread_kj_cast_fu_256_p1);
    sensitive << ( kj_reg_112 );

    SC_METHOD(thread_p_shl1_cast_fu_246_p1);
    sensitive << ( tmp_14_fu_238_p3 );

    SC_METHOD(thread_p_shl2_cast_fu_224_p1);
    sensitive << ( tmp_12_fu_216_p3 );

    SC_METHOD(thread_p_shl_cast_fu_151_p1);
    sensitive << ( tmp_2_fu_143_p3 );

    SC_METHOD(thread_res_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( res_addr_reg_351 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_16_cast_fu_186_p1 );

    SC_METHOD(thread_res_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_res_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( grp_fu_311_p3 );

    SC_METHOD(thread_res_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_165_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_tmp_12_fu_216_p3);
    sensitive << ( tmp_4_fu_207_p2 );

    SC_METHOD(thread_tmp_13_fu_228_p2);
    sensitive << ( tmp_5_cast_fu_212_p1 );
    sensitive << ( p_shl2_cast_fu_224_p1 );

    SC_METHOD(thread_tmp_14_fu_238_p3);
    sensitive << ( ki_reg_101 );

    SC_METHOD(thread_tmp_15_fu_250_p2);
    sensitive << ( p_shl1_cast_fu_246_p1 );
    sensitive << ( tmp_6_cast_fu_234_p1 );

    SC_METHOD(thread_tmp_16_cast_fu_186_p1);
    sensitive << ( tmp_9_fu_181_p2 );

    SC_METHOD(thread_tmp_16_fu_281_p2);
    sensitive << ( tmp_13_reg_364 );
    sensitive << ( tmp_9_cast_fu_277_p1 );

    SC_METHOD(thread_tmp_17_fu_295_p2);
    sensitive << ( tmp_15_reg_369 );
    sensitive << ( tmp_1_cast_fu_291_p1 );

    SC_METHOD(thread_tmp_1_cast_fu_291_p1);
    sensitive << ( kj_reg_112 );

    SC_METHOD(thread_tmp_21_cast_fu_286_p1);
    sensitive << ( tmp_16_fu_281_p2 );

    SC_METHOD(thread_tmp_22_cast_fu_300_p1);
    sensitive << ( tmp_17_fu_295_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_177_p1);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_tmp_2_fu_143_p3);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_tmp_4_fu_207_p2);
    sensitive << ( i_cast_reg_320 );
    sensitive << ( ki_cast_fu_191_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_212_p1);
    sensitive << ( tmp_4_fu_207_p2 );

    SC_METHOD(thread_tmp_5_fu_155_p2);
    sensitive << ( p_shl_cast_fu_151_p1 );
    sensitive << ( tmp_cast_fu_139_p1 );

    SC_METHOD(thread_tmp_6_cast_fu_234_p1);
    sensitive << ( ki_reg_101 );

    SC_METHOD(thread_tmp_8_fu_272_p2);
    sensitive << ( j_cast_reg_338 );
    sensitive << ( kj_cast_fu_256_p1 );

    SC_METHOD(thread_tmp_9_cast_fu_277_p1);
    sensitive << ( tmp_8_fu_272_p2 );

    SC_METHOD(thread_tmp_9_fu_181_p2);
    sensitive << ( tmp_5_reg_333 );
    sensitive << ( tmp_2_cast_fu_177_p1 );

    SC_METHOD(thread_tmp_cast_fu_139_p1);
    sensitive << ( i_reg_79 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_127_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_165_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_195_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_260_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv2d_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, res_address0, "(port)res_address0");
    sc_trace(mVcdFile, res_ce0, "(port)res_ce0");
    sc_trace(mVcdFile, res_we0, "(port)res_we0");
    sc_trace(mVcdFile, res_d0, "(port)res_d0");
    sc_trace(mVcdFile, res_q0, "(port)res_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_cast_fu_123_p1, "i_cast_fu_123_p1");
    sc_trace(mVcdFile, i_cast_reg_320, "i_cast_reg_320");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_133_p2, "i_1_fu_133_p2");
    sc_trace(mVcdFile, i_1_reg_328, "i_1_reg_328");
    sc_trace(mVcdFile, tmp_5_fu_155_p2, "tmp_5_fu_155_p2");
    sc_trace(mVcdFile, tmp_5_reg_333, "tmp_5_reg_333");
    sc_trace(mVcdFile, exitcond3_fu_127_p2, "exitcond3_fu_127_p2");
    sc_trace(mVcdFile, j_cast_fu_161_p1, "j_cast_fu_161_p1");
    sc_trace(mVcdFile, j_cast_reg_338, "j_cast_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_1_fu_171_p2, "j_1_fu_171_p2");
    sc_trace(mVcdFile, j_1_reg_346, "j_1_reg_346");
    sc_trace(mVcdFile, res_addr_reg_351, "res_addr_reg_351");
    sc_trace(mVcdFile, exitcond2_fu_165_p2, "exitcond2_fu_165_p2");
    sc_trace(mVcdFile, ki_1_fu_201_p2, "ki_1_fu_201_p2");
    sc_trace(mVcdFile, ki_1_reg_359, "ki_1_reg_359");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_13_fu_228_p2, "tmp_13_fu_228_p2");
    sc_trace(mVcdFile, tmp_13_reg_364, "tmp_13_reg_364");
    sc_trace(mVcdFile, exitcond1_fu_195_p2, "exitcond1_fu_195_p2");
    sc_trace(mVcdFile, tmp_15_fu_250_p2, "tmp_15_fu_250_p2");
    sc_trace(mVcdFile, tmp_15_reg_369, "tmp_15_reg_369");
    sc_trace(mVcdFile, kj_1_fu_266_p2, "kj_1_fu_266_p2");
    sc_trace(mVcdFile, kj_1_reg_377, "kj_1_reg_377");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_260_p2, "exitcond_fu_260_p2");
    sc_trace(mVcdFile, a_load_reg_392, "a_load_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, b_load_reg_397, "b_load_reg_397");
    sc_trace(mVcdFile, i_reg_79, "i_reg_79");
    sc_trace(mVcdFile, j_reg_90, "j_reg_90");
    sc_trace(mVcdFile, ki_reg_101, "ki_reg_101");
    sc_trace(mVcdFile, kj_reg_112, "kj_reg_112");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_16_cast_fu_186_p1, "tmp_16_cast_fu_186_p1");
    sc_trace(mVcdFile, tmp_21_cast_fu_286_p1, "tmp_21_cast_fu_286_p1");
    sc_trace(mVcdFile, tmp_22_cast_fu_300_p1, "tmp_22_cast_fu_300_p1");
    sc_trace(mVcdFile, grp_fu_311_p3, "grp_fu_311_p3");
    sc_trace(mVcdFile, tmp_2_fu_143_p3, "tmp_2_fu_143_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_151_p1, "p_shl_cast_fu_151_p1");
    sc_trace(mVcdFile, tmp_cast_fu_139_p1, "tmp_cast_fu_139_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_177_p1, "tmp_2_cast_fu_177_p1");
    sc_trace(mVcdFile, tmp_9_fu_181_p2, "tmp_9_fu_181_p2");
    sc_trace(mVcdFile, ki_cast_fu_191_p1, "ki_cast_fu_191_p1");
    sc_trace(mVcdFile, tmp_4_fu_207_p2, "tmp_4_fu_207_p2");
    sc_trace(mVcdFile, tmp_12_fu_216_p3, "tmp_12_fu_216_p3");
    sc_trace(mVcdFile, tmp_5_cast_fu_212_p1, "tmp_5_cast_fu_212_p1");
    sc_trace(mVcdFile, p_shl2_cast_fu_224_p1, "p_shl2_cast_fu_224_p1");
    sc_trace(mVcdFile, tmp_14_fu_238_p3, "tmp_14_fu_238_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_246_p1, "p_shl1_cast_fu_246_p1");
    sc_trace(mVcdFile, tmp_6_cast_fu_234_p1, "tmp_6_cast_fu_234_p1");
    sc_trace(mVcdFile, kj_cast_fu_256_p1, "kj_cast_fu_256_p1");
    sc_trace(mVcdFile, tmp_8_fu_272_p2, "tmp_8_fu_272_p2");
    sc_trace(mVcdFile, tmp_9_cast_fu_277_p1, "tmp_9_cast_fu_277_p1");
    sc_trace(mVcdFile, tmp_16_fu_281_p2, "tmp_16_fu_281_p2");
    sc_trace(mVcdFile, tmp_1_cast_fu_291_p1, "tmp_1_cast_fu_291_p1");
    sc_trace(mVcdFile, tmp_17_fu_295_p2, "tmp_17_fu_295_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("conv2d.hdltvin.dat");
    mHdltvoutHandle.open("conv2d.hdltvout.dat");
}

conv2d::~conv2d() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete conv2d_mac_muladdbkb_U1;
}

void conv2d::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_165_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_reg_79 = i_1_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_79 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_195_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j_reg_90 = j_1_reg_346.read();
    } else if ((esl_seteq<1,1,1>(exitcond3_fu_127_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_90 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_260_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ki_reg_101 = ki_1_reg_359.read();
    } else if ((esl_seteq<1,1,1>(exitcond2_fu_165_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ki_reg_101 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        kj_reg_112 = kj_1_reg_377.read();
    } else if ((esl_seteq<1,1,1>(exitcond1_fu_195_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        kj_reg_112 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        a_load_reg_392 = a_q0.read();
        b_load_reg_397 = b_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_328 = i_1_fu_133_p2.read();
        i_cast_reg_320 = i_cast_fu_123_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_346 = j_1_fu_171_p2.read();
        j_cast_reg_338 = j_cast_fu_161_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ki_1_reg_359 = ki_1_fu_201_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        kj_1_reg_377 = kj_1_fu_266_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond2_fu_165_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        res_addr_reg_351 =  (sc_lv<4>) (tmp_16_cast_fu_186_p1.read());
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_195_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        tmp_13_reg_364 = tmp_13_fu_228_p2.read();
        tmp_15_reg_369 = tmp_15_fu_250_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond3_fu_127_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_5_reg_333 = tmp_5_fu_155_p2.read();
    }
}

void conv2d::thread_a_address0() {
    a_address0 =  (sc_lv<5>) (tmp_21_cast_fu_286_p1.read());
}

void conv2d::thread_a_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv2d::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv2d::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv2d::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv2d::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv2d::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv2d::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv2d::thread_ap_done() {
    if ((esl_seteq<1,1,1>(exitcond3_fu_127_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void conv2d::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv2d::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond3_fu_127_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void conv2d::thread_b_address0() {
    b_address0 =  (sc_lv<4>) (tmp_22_cast_fu_300_p1.read());
}

void conv2d::thread_b_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_exitcond1_fu_195_p2() {
    exitcond1_fu_195_p2 = (!ki_reg_101.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ki_reg_101.read() == ap_const_lv2_3);
}

void conv2d::thread_exitcond2_fu_165_p2() {
    exitcond2_fu_165_p2 = (!j_reg_90.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_90.read() == ap_const_lv2_3);
}

void conv2d::thread_exitcond3_fu_127_p2() {
    exitcond3_fu_127_p2 = (!i_reg_79.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_79.read() == ap_const_lv2_3);
}

void conv2d::thread_exitcond_fu_260_p2() {
    exitcond_fu_260_p2 = (!kj_reg_112.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(kj_reg_112.read() == ap_const_lv2_3);
}

void conv2d::thread_i_1_fu_133_p2() {
    i_1_fu_133_p2 = (!i_reg_79.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_reg_79.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2d::thread_i_cast_fu_123_p1() {
    i_cast_fu_123_p1 = esl_zext<3,2>(i_reg_79.read());
}

void conv2d::thread_j_1_fu_171_p2() {
    j_1_fu_171_p2 = (!j_reg_90.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_reg_90.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2d::thread_j_cast_fu_161_p1() {
    j_cast_fu_161_p1 = esl_zext<3,2>(j_reg_90.read());
}

void conv2d::thread_ki_1_fu_201_p2() {
    ki_1_fu_201_p2 = (!ki_reg_101.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ki_reg_101.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2d::thread_ki_cast_fu_191_p1() {
    ki_cast_fu_191_p1 = esl_zext<3,2>(ki_reg_101.read());
}

void conv2d::thread_kj_1_fu_266_p2() {
    kj_1_fu_266_p2 = (!kj_reg_112.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(kj_reg_112.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void conv2d::thread_kj_cast_fu_256_p1() {
    kj_cast_fu_256_p1 = esl_zext<3,2>(kj_reg_112.read());
}

void conv2d::thread_p_shl1_cast_fu_246_p1() {
    p_shl1_cast_fu_246_p1 = esl_zext<5,4>(tmp_14_fu_238_p3.read());
}

void conv2d::thread_p_shl2_cast_fu_224_p1() {
    p_shl2_cast_fu_224_p1 = esl_zext<6,5>(tmp_12_fu_216_p3.read());
}

void conv2d::thread_p_shl_cast_fu_151_p1() {
    p_shl_cast_fu_151_p1 = esl_zext<5,4>(tmp_2_fu_143_p3.read());
}

void conv2d::thread_res_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        res_address0 = res_addr_reg_351.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        res_address0 =  (sc_lv<4>) (tmp_16_cast_fu_186_p1.read());
    } else {
        res_address0 = "XXXX";
    }
}

void conv2d::thread_res_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        res_ce0 = ap_const_logic_1;
    } else {
        res_ce0 = ap_const_logic_0;
    }
}

void conv2d::thread_res_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        res_d0 = grp_fu_311_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        res_d0 = ap_const_lv16_0;
    } else {
        res_d0 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
    }
}

void conv2d::thread_res_we0() {
    if (((esl_seteq<1,1,1>(exitcond2_fu_165_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        res_we0 = ap_const_logic_1;
    } else {
        res_we0 = ap_const_logic_0;
    }
}

void conv2d::thread_tmp_12_fu_216_p3() {
    tmp_12_fu_216_p3 = esl_concat<3,2>(tmp_4_fu_207_p2.read(), ap_const_lv2_0);
}

void conv2d::thread_tmp_13_fu_228_p2() {
    tmp_13_fu_228_p2 = (!tmp_5_cast_fu_212_p1.read().is_01() || !p_shl2_cast_fu_224_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_5_cast_fu_212_p1.read()) + sc_biguint<6>(p_shl2_cast_fu_224_p1.read()));
}

void conv2d::thread_tmp_14_fu_238_p3() {
    tmp_14_fu_238_p3 = esl_concat<2,2>(ki_reg_101.read(), ap_const_lv2_0);
}

void conv2d::thread_tmp_15_fu_250_p2() {
    tmp_15_fu_250_p2 = (!p_shl1_cast_fu_246_p1.read().is_01() || !tmp_6_cast_fu_234_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl1_cast_fu_246_p1.read()) - sc_biguint<5>(tmp_6_cast_fu_234_p1.read()));
}

void conv2d::thread_tmp_16_cast_fu_186_p1() {
    tmp_16_cast_fu_186_p1 = esl_sext<64,5>(tmp_9_fu_181_p2.read());
}

void conv2d::thread_tmp_16_fu_281_p2() {
    tmp_16_fu_281_p2 = (!tmp_13_reg_364.read().is_01() || !tmp_9_cast_fu_277_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_13_reg_364.read()) + sc_biguint<6>(tmp_9_cast_fu_277_p1.read()));
}

void conv2d::thread_tmp_17_fu_295_p2() {
    tmp_17_fu_295_p2 = (!tmp_15_reg_369.read().is_01() || !tmp_1_cast_fu_291_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_15_reg_369.read()) + sc_biguint<5>(tmp_1_cast_fu_291_p1.read()));
}

void conv2d::thread_tmp_1_cast_fu_291_p1() {
    tmp_1_cast_fu_291_p1 = esl_zext<5,2>(kj_reg_112.read());
}

void conv2d::thread_tmp_21_cast_fu_286_p1() {
    tmp_21_cast_fu_286_p1 = esl_zext<64,6>(tmp_16_fu_281_p2.read());
}

void conv2d::thread_tmp_22_cast_fu_300_p1() {
    tmp_22_cast_fu_300_p1 = esl_sext<64,5>(tmp_17_fu_295_p2.read());
}

void conv2d::thread_tmp_2_cast_fu_177_p1() {
    tmp_2_cast_fu_177_p1 = esl_zext<5,2>(j_reg_90.read());
}

void conv2d::thread_tmp_2_fu_143_p3() {
    tmp_2_fu_143_p3 = esl_concat<2,2>(i_reg_79.read(), ap_const_lv2_0);
}

void conv2d::thread_tmp_4_fu_207_p2() {
    tmp_4_fu_207_p2 = (!ki_cast_fu_191_p1.read().is_01() || !i_cast_reg_320.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ki_cast_fu_191_p1.read()) + sc_biguint<3>(i_cast_reg_320.read()));
}

void conv2d::thread_tmp_5_cast_fu_212_p1() {
    tmp_5_cast_fu_212_p1 = esl_zext<6,3>(tmp_4_fu_207_p2.read());
}

void conv2d::thread_tmp_5_fu_155_p2() {
    tmp_5_fu_155_p2 = (!p_shl_cast_fu_151_p1.read().is_01() || !tmp_cast_fu_139_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl_cast_fu_151_p1.read()) - sc_biguint<5>(tmp_cast_fu_139_p1.read()));
}

void conv2d::thread_tmp_6_cast_fu_234_p1() {
    tmp_6_cast_fu_234_p1 = esl_zext<5,2>(ki_reg_101.read());
}

void conv2d::thread_tmp_8_fu_272_p2() {
    tmp_8_fu_272_p2 = (!kj_cast_fu_256_p1.read().is_01() || !j_cast_reg_338.read().is_01())? sc_lv<3>(): (sc_biguint<3>(kj_cast_fu_256_p1.read()) + sc_biguint<3>(j_cast_reg_338.read()));
}

void conv2d::thread_tmp_9_cast_fu_277_p1() {
    tmp_9_cast_fu_277_p1 = esl_zext<6,3>(tmp_8_fu_272_p2.read());
}

void conv2d::thread_tmp_9_fu_181_p2() {
    tmp_9_fu_181_p2 = (!tmp_5_reg_333.read().is_01() || !tmp_2_cast_fu_177_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(tmp_5_reg_333.read()) + sc_biguint<5>(tmp_2_cast_fu_177_p1.read()));
}

void conv2d::thread_tmp_cast_fu_139_p1() {
    tmp_cast_fu_139_p1 = esl_zext<5,2>(i_reg_79.read());
}

void conv2d::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond3_fu_127_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond2_fu_165_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_195_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_260_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void conv2d::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_address0\" :  \"" << res_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_ce0\" :  \"" << res_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_we0\" :  \"" << res_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"res_d0\" :  \"" << res_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"res_q0\" :  \"" << res_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

